include "cowgol.coh";
include "_framework.coh";
sub doloop(x: intptr, y: intptr): (r: intptr) is
	if x > 0 then
		passto doloop(x - y, y);
	else
		r := x;
	end if;
end sub;

print("simple-tailrec");
if doloop(10, 1) == 0 then yes(); else no(); end if;

print("does-not-smash-stack"); #should run to completion and not crash.
if doloop(0xFFFF, 1) == 0 then yes(); end if;

@decl sub mutual2(x: intptr): (r: intptr);

sub mutual1(x: intptr): (r: intptr) is

	if x < 18 then
		passto mutual2(x + 5);
	else
		r := x;
	end if;
end sub;

@impl sub mutual2 is
	passto mutual1(x + 4);
end sub;

print("mutual-tailrec");
if mutual1(0) == 18 then yes(); else no(); end if;


sub doloop2(x: intptr): (r: intptr) is
	if x < 72 then
		passto doloop2(x + mutual1(0));
	else
		r := x;
	end if;
end sub;

print("double-tailrec");
if doloop2(0) == 72 then yes(); else no(); end if;

sub doloop3(x: intptr): (r: intptr) is
	if x > 0 then
		passto doloop3(x - doloop2(0));
	else
		r := x;
	end if;
end sub;

print("triple-tailrec");
if doloop3(144) == 0 then yes(); else no(); end if;

interface indirect(x: intptr): (r: intptr);
var ind_ptr: [indirect];

sub doloop4 implements indirect is
	if x > 0 then
		passto [ind_ptr](doloop3(x));
	else
		r := x;
	end if;
end sub;


var ind: indirect[] := {doloop4};
ind_ptr := &ind[0];
print("indirect-tailrec");
if [ind_ptr](72) == 0 then yes(); else no(); end if;
