var LOMEM: [uint8];
var HIMEM: [uint8];

# NB: apout ignores brk()
sub _find_himem() is
	@asm "mov #0087h, -(sp)"; # ret
	@asm "mov himem, -(sp)"; # brk address
	@asm "mov #8911h, -(sp)"; # trap 17, brk

	@asm "find_himem_loop:";
	@asm "call @sp";
	@asm "bcc find_himem_done";
	@asm "sub #256, 2(sp)";
	@asm "br find_himem_loop";
	@asm "find_himem_done:";

	@asm "mov r0, ", HIMEM;
	@asm "add #6, sp";
end sub;

@asm "\tmov #bss_end+2,", LOMEM;
_find_himem();

sub Exit() is
	@asm "br exit";
end sub;

sub ExitWithError() is
	@asm "mov #1, r0";
	@asm "trap 1"; # exit
end sub;

sub AlignUp(in: intptr): (out: intptr) is
	out := (in + 1) & ~1;
end sub;

sub print_char(c: uint8) is
	@asm "mov #1, r0"; # param 1
	@asm "trap 4";
	@asm "dw ", c;     # param 2
	@asm "dw 1";       # param 3
end sub;

sub MemSet(buf: [uint8], byte: uint8, len: uint16) is
	var bufend := buf + len;
	loop
		if buf == bufend then
			return;
		end if;
		[buf] := byte;
		buf := buf + 1;
	end loop;
end sub;

sub print_oct_i16(value: uint16) is
    var i: uint8 := 5;
	print_char(((value >> 15) + '0') as uint8);
    loop
        var digit := (((value >> 12) & 7) + '0') as uint8;
        print_char(digit);
        value := value << 3;
        i := i - 1;
        if i == 0 then
            break;
        end if;
    end loop;
end sub;

include "common.coh";

