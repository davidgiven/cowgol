# System call numbers are here:
# https://mdfs.net/Docs/Comp/PDP11/Unix/SYSCalls

const FCB_BUFFER_SIZE := 512;
typedef FCBIndexType is uint16;

record RawFCB is
    fd: uint16;
end record;


include "fileio.coh";

@impl sub FCBRawRead is
    var fd := fcb.fd;
    var dma := &fcb.buffer[0];
    var i: int16;
    var errno: int16 := 0;

    amount := 0;
    @asm "mov #0087h, -(sp)"; # ret
    @asm "mov #0, -(sp)"; # whence
    @asm "mov ", pos, "+0, -(sp)"; # pos lo
    @asm "mov ", pos, "+2, -(sp)"; # pos hi
    @asm "mov #8913h, -(sp)"; # lseek
    @asm "mov ", fd, ", r0";
    @asm "call @sp";
    @asm "adc ", errno;
    @asm "add #10, sp";

    if errno != 0 then
        fcb.flags := fcb.flags | FCB_FLAG_ERROR;
        return;
    end if;

    @asm "mov #0087h, -(sp)"; # ret
    @asm "mov ", len, ", -(sp)";
    @asm "mov ", dma, ", -(sp)";
    @asm "mov #8903h, -(sp)"; # read
    @asm "mov ", fd, ", r0";
    @asm "call @sp";
    @asm "adc ", errno;
    @asm "add #8, sp";
    @asm "mov r0,", i;

    if errno != 0 then
        fcb.flags := fcb.flags | FCB_FLAG_ERROR;
    else
        amount := i as FCBIndexType;
    end if;
end sub;

@impl sub FCBRawWrite is
    var fd := fcb.fd;
    var dma := &fcb.buffer[0];
    var i: int16 := 0;

    @asm "mov #0087h, -(sp)"; # ret
    @asm "mov #0, -(sp)"; # whence
    @asm "mov ", pos, "+0, -(sp)"; # pos lo
    @asm "mov ", pos, "+2, -(sp)"; # pos hi
    @asm "mov #8913h, -(sp)"; # lseek
    @asm "mov ", fd, ", r0";
    @asm "call @sp";
    @asm "adc ", i;
    @asm "add #10, sp";

    if i != 0 then
        fcb.flags := fcb.flags | FCB_FLAG_ERROR;
        return;
    end if;

    @asm "mov #0087h, -(sp)"; # ret
    @asm "mov ", len, ", -(sp)";
    @asm "mov ", dma, ", -(sp)";
    @asm "mov #8904h, -(sp)"; # write
    @asm "mov ", fd, ", r0";
    @asm "call @sp";
    @asm "adc ", i;
    @asm "add #8, sp";

    if i != 0 then
        fcb.flags := fcb.flags | FCB_FLAG_ERROR;
    end if;
end sub;

sub fcb_i_open(fcb: [FCB], filename: [uint8], flags: uint32): (errno: uint8) is
    _fcb_init(fcb);
    var fd: int16;

    errno := 0;
    fd := flags as int16;
    @asm "mov #0087h, -(sp)"; # ret
    @asm "mov ", fd, ", -(sp)";
    @asm "mov ", filename, ", -(sp)";
    @asm "mov #8905h, -(sp)"; # open
    @asm "call @sp";
    @asm "adcb ", errno;
    @asm "add #8, sp";
    @asm "mov r0, ", fd;

    if errno == 0 then
        fcb.fd := fd as uint16;
    else
        errno := fd as uint8;
    end if;
end sub;

sub FCBOpenIn(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	(errno) := fcb_i_open(fcb, filename, 0o0000); # O_RDONLY
end sub;

sub FCBOpenUp(fcb: [FCB], filename: [uint8]): (errno: uint8) is
	(errno) := fcb_i_open(fcb, filename, 0o0002); # O_RDWR
end sub;

sub FCBOpenOut(fcb: [FCB], filename: [uint8]): (errno: uint8) is
    _fcb_init(fcb);
    var fd: int16;

    errno := 0;
    @asm "mov #0087h, -(sp)"; # ret
    @asm "mov #644o, -(sp)";
    @asm "mov ", filename, ", -(sp)";
    @asm "mov #8908h, -(sp)"; # creat
    @asm "call @sp";
    @asm "adcb ", errno;
    @asm "add #8, sp";
    @asm "mov r0, ", fd;

    if errno == 0 then
        fcb.fd := fd as uint16;
    else
        errno := fd as uint8;
    end if;
end sub;

sub FCBClose(fcb: [FCB]): (errno: uint8) is
	FCBFlush(fcb);

	var fd := fcb.fd;
    @asm "mov ", fd, ", r0";
    @asm "trap 6";
    @asm "neg r0";
    @asm "mov r0, ", errno;
end sub;

sub FCBExt(fcb: [FCB]): (len: uint32) is
	FCBFlush(fcb);

	var fd := fcb.fd;
    @asm "mov ", fd, ", r0";
    @asm "trap 19";
    @asm "dw 0, 0"; # pos
    @asm "dw 2"; # whence
    @asm "mov r0, ", len, "+2";
    @asm "mov r1, ", len, "+0";
end sub;

include "common-file.coh";

# vim: ts=4 sw=4 et
