record Symbol: Number is
	value: Number;
	name: string;
	next: [Symbol];
end record;

var hashtable: [Symbol][16];

sub InitSymbolTable() is
	var p := &hashtable[0];
	while p != &hashtable[@sizeof hashtable] loop
		[p] := 0 as [Symbol];
		p := @next p;
	end loop;
end sub;
InitSymbolTable();

sub FindSymbol(name: string): (symbol: [Symbol]) is
	var hash := [name] & 0xf;
	var chain := &hashtable[hash];
	symbol := [chain];
	while symbol != nil loop
		if StrCmp(symbol.name, name) == 0 then
			return;
		end if;
		symbol := symbol.next;
	end loop;
	symbol := Alloc(@bytesof Symbol) as [Symbol];
	symbol.name := StrDup(name);
	symbol.next := [chain];
	[chain] := symbol;
end sub;

sub SetSymbol(name: string, value: Arith, addressSpace: uint8) is
	var s := FindSymbol(name);
	if (s.number != value) or (s.addressSpace != addressSpace) then
		symbolsModified := 1;
	end if;
	s.number := value;
	s.addressSpace := addressSpace;
end sub;

