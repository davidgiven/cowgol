include "cowgol.coh";
include "argv.coh";
include "file.coh";
include "strings.coh";
include "malloc.coh";

typedef Arith is uint16;

include "types.coh";
include "archac1082.tokens.coh";

@decl sub UpdateProgramCounters();

const AS_IDATA := 0x80;
const AS_XDATA := 0x81;

var keywords: Keyword[] := {
	# --- Special pseudo-instructions ------------------------------------

	{ ".org",    INSN_ORG,     0 },
	{ ".seg",    INSN_SEGMENT, 0 },
	{ ".db",     INSN_DB,      0 },
	{ ".dw",     INSN_DW,      0 },

	# --- 'Normal' 8051 instructions -------------------------------------

	{ "a",       REG_A,       0 },
	{ "ab",      REG_AB,      0 },
	{ "c",       REG_C,       0 },
	{ "dptr",    REG_DPTR,    0 },
	{ "pc",      REG_PC,      0 },
	{ "r0",      REG_8,       0 },
	{ "r1",      REG_8,       1 },
	{ "r2",      REG_8,       2 },
	{ "r3",      REG_8,       3 },
	{ "r4",      REG_8,       4 },
	{ "r5",      REG_8,       5 },
	{ "r6",      REG_8,       6 },
	{ "r7",      REG_8,       7 },

	{ "add",     INSN_ALU_A,  0x20 },
	{ "addc",    INSN_ALU_A,  0x30 },
	{ "anl",     INSN_ANL,    0x50 },
	{ "orl",     INSN_ORL,    0x40 },
	{ "subb",    INSN_ALU_A,  0x90 },
	{ "xrl",     INSN_ALU_A,  0x60 },
	{ "xch",     INSN_ALU_A,  0xc0 },

	{ "dec",     INSN_ALU,    0x10 },

	{ "ajmp",    INSN_ABSA,   0x01 },
	{ "acall",   INSN_ABSA,   0x11 },

	{ "ljmp",    INSN_ABSL,   0x02 },
	{ "lcall",   INSN_ABSL,   0x12 },

	{ "cjne",    INSN_CJNE,   0xb0 },

	{ "clr",     INSN_CLR,    0x00 },
	{ "cpl",     INSN_CPL,    0x00 },

	{ "da",      INSN_JUST_A, 0xd4 },

	{ "div",     INSN_JUST_AB, 0x84 },
	{ "mul",     INSN_JUST_AB, 0xa4 },

	{ "djnz",    INSN_DJNZ,   0xd0 },

	{ "inc",     INSN_INC,    0x00 },

	{ "jb",      INSN_JB,     0x20 },
	{ "jbc",     INSN_JB,     0x10 },
	{ "jnb",     INSN_JB,     0x30 },
	
	{ "jc",      INSN_J,      0x40 },
	{ "jnc",     INSN_J,      0x50 },
	{ "jz",      INSN_J,      0x60 },
	{ "jnz",     INSN_J,      0x70 },

	{ "jmp",     INSN_JMP,    0x00 },

	{ "mov",     INSN_MOV,    0x00 },
	{ "movc",    INSN_MOVC,   0x00 },
	{ "movx",    INSN_MOVX,   0x00 },

	{ "nop",     INSN_SIMPLE, 0x00 },

	{ "push",    INSN_JUST_D, 0xc0 },
	{ "pop",     INSN_JUST_D, 0xd0 },

	{ "ret",     INSN_SIMPLE, 0x22 },
	{ "reti",    INSN_SIMPLE, 0x32 },

	{ "rl",      INSN_JUST_A, 0x23 },
	{ "rlc",     INSN_JUST_A, 0x33 },
	{ "rr",      INSN_JUST_A, 0x03 },
	{ "rrc",     INSN_JUST_A, 0x13 },

	{ "setb",    INSN_SETB,   0x00 },
	
	{ "sjmp",    INSN_J,      0x80 },

	{ "swap",    INSN_JUST_A, 0xc4 },

	{ "xchd",    INSN_XCHD,   0x00 },

	# --- AC1082 extended instructions -----------------------------------

	{ "r0r1",    REG_16,           0 },
	{ "r2r3",    REG_16,           1 },
	{ "r4r5",    REG_16,           2 },
	{ "r6r7",    REG_16,           3 },

	{ "add16",   INSN_EXT_RI_RI,   0x0000 },
	{ "addc16",  INSN_EXT_RI_RI,   0x0030 },
	{ "add16s",  INSN_EXT_RI_RI,   0x0060 },
	{ "addc16s", INSN_EXT_RI_RI,   0x0090 },
	{ "sub16",   INSN_EXT_RI_RI,   0x00c0 },
	{ "subc16",  INSN_EXT_RI_RI,   0x00f0 },
	{ "sub16s",  INSN_EXT_RI_RI,   0x0120 },
	{ "subc16s", INSN_EXT_RI_RI,   0x0150 },
	{ "anl16",   INSN_EXT_RI_RI,   0x0180 },
	{ "orl16",   INSN_EXT_RI_RI,   0x01b0 },
	{ "xrl16",   INSN_EXT_RI_RI,   0x01e0 },

	{ "mac16",   INSN_EXT_R_RI,    0x0210 },
	{ "mac16s",  INSN_EXT_R_RI,    0x0230 },

	{ "mov16b",  INSN_EXT_MOVB,    0 },

	{ "lsr16",   INSN_EXT_LSR,     0 },
	{ "lsl16",   INSN_EXT_LSL,     0 },
	{ "asr16",   INSN_EXT_ASR,     0 },
	{ "rotl16",  INSN_EXT_ROTL,    0 },
	{ "rotr16",  INSN_EXT_ROTR,    0 },

	{ "inc16",   INSN_EXT_JUST_REG, 0x10 },
	{ "inc216",  INSN_EXT_JUST_REG, 0x14 },
	{ "dec16",   INSN_EXT_JUST_REG, 0x18 },
	{ "dec216",  INSN_EXT_JUST_REG, 0x1c },

	{ "cmp16",   INSN_EXT_JUST_REGS, 0x60 },

	{ "mov16",   INSN_EXT_MOV,     0 },

	{ "mul16",   INSN_EXT_MUL,     0xc0 },
	{ "mul16s",  INSN_EXT_MUL,     0xd0 },
	{ "mul16wr", INSN_EXT_MULWR,   0x06 },
	{ "mul16swr", INSN_EXT_MULWR,  0x07 },
};

include "lexer.coh";
include "utils.coh";
include "emitter.coh";
include "symbols.coh";
include "sizing.coh";

sub Emit16(w: uint16) is
	Emit8((w >> 8) as uint8);
	Emit8(w as uint8);
end sub;

sub Emit32(n: [Number]) is
	var d := n.number;
	Emit16((d >> 16) as uint16);
	Emit16(d as uint16);
end sub;

include "archac1082.parser.coh";
include "cowasm2.coh";
include "flatemitter.coh";

Main("8051 family assembler (c) 2021 David Given");

