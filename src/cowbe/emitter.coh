record EmitterStream is
	subid: uint16;
end record;

var outfcb: FCB;

var outputbuffer: uint8[2048];
var outputbufferpos: @indexof outputbuffer := 0;

var streams: EmitterStream[8];
var current_stream: [EmitterStream] := 0 as [EmitterStream];
var current_stream_id: uint8 := 0;

sub WriteB8(b: uint8) is
	FCBPutChar(&outfcb, b);
end sub;

sub WriteB16(w: uint16) is
	WriteB8(w as uint8);
	WriteB8((w>>8) as uint8);
end sub;

sub FlushCurrentStream(close: uint8) is
	WriteB8('F');
	WriteB16((outputbufferpos as uint16)+3);
	WriteB8(current_stream_id | close);
	WriteB16(current_stream.subid);
	FCBPutBlock(&outfcb, &outputbuffer[0], outputbufferpos as intptr);
	outputbufferpos := 0;
end sub;
	
sub E_b8(byte: uint8) is
	if current_stream != nil then
		outputbuffer[outputbufferpos] := byte;
		outputbufferpos := outputbufferpos + 1;
		if outputbufferpos == @bytesof outputbuffer then
			FlushCurrentStream(0);
		end if;
	end if;
end sub;

sub E_b16(word: uint16) is
	E_b8(word as uint8);
	E_b8((word>>8) as uint8);
end sub;

sub E_b32(quad: uint32) is
	E_b16(quad as uint16);
	E_b16((quad>>16) as uint16);
end sub;

sub E_space() is
	E_b8(' ');
end sub;

sub E_comma() is
	E_b8(',');
end sub;

sub E_tab() is
	E_b8('\t');
end sub;

sub E_nl() is
	E_b8('\n');
end sub;

sub E_openp() is
	E_b8('(');
end sub;

sub E_closep() is
	E_b8(')');
end sub;

sub E(text: string) is
	loop
		var c := [text];
		text := text + 1;
		if c == 0 then
			break;
		end if;
		E_b8(c);
	end loop;
end sub;

sub E_u32(value: uint32) is
	var buffer: uint8[12];
	var p := &buffer[0];
	var pe := UIToA(value, 10, p);

	loop
		var c := [p];
		if c == 0 then
			break;
		end if;
		E_b8(c);
		p := @next p;
	end loop;
end sub;

sub E_u16(value: uint16) is
	E_u32(value as uint32);
end sub;

sub E_u8(value: uint8) is
	E_u32(value as uint32);
end sub;

sub E_i8(value: int8) is
	if value < 0 then
		E_b8('-');
		value := -value;
	else
		E_b8('+');
	end if;
	E_u8(value as uint8);
end sub;

sub E_i16(value: int16) is
	if value < 0 then
		E_b8('-');
		value := -value;
	else
		E_b8('+');
	end if;
	E_u16(value as uint16);
end sub;

sub E_i32(value: int32) is
	if value < 0 then
		E_b8('-');
		value := -value;
	else
		E_b8('+');
	end if;
	E_u32(value as uint32);
end sub;

sub E_h(value: uint32, width: uint8) is
	var buffer: uint8[5];
	var pe := UIToA(value as uint32, 16, &buffer[0]);
	var padding := width - (pe - &buffer[0]) as uint8;
	while padding != 0 loop
		E_b8('0');
		padding := padding - 1;
	end loop;
	E(&buffer[0]);
end sub;

sub E_h8(value: uint8) is
	E_h(value as uint32, 2);
end sub;

sub E_h16(value: uint16) is
	E_h(value as uint32, 4);
end sub;

sub E_h32(value: uint32) is
	E_h(value as uint32, 8);
end sub;

sub E_labelref(labelid: uint16) is
	E_b8(COO_ESCAPE_THISCOO);
	E_h16(labelid);
end sub;

sub E_subref(subr: [Subroutine]) is
	if subr == current_subr then
		E_b8(COO_ESCAPE_THISSUB);
	else
		E_b8(COO_ESCAPE_SUBREF);
		E_b16(subr.id);
	end if;
end sub;

sub E_wsref(id: uint16, wsid: uint8, off: uint16) is
	if wsid == WSID_STATIC then
		E_b8(COO_ESCAPE_SUBREF);
		E_b16(id);
		E("_s");
		E_h16(off);
	else
		E_b8(COO_ESCAPE_WSREF);
		E_b16(id);
		E_b8(wsid);
		E_b16(off);
	end if;
end sub;

sub EmitterOpenStream(subr: [Subroutine]) is
	if current_stream == nil then
		current_stream := &streams[0];
		current_stream_id := 0;
	else
		FlushCurrentStream(0);
		current_stream := @next current_stream;
		current_stream_id := current_stream_id + 1;
	end if;
	current_stream.subid := subr.id;
end sub;

sub EmitterCloseStream() is
	FlushCurrentStream(0x80);
	if current_stream == &streams[0] then
		current_stream := 0 as [EmitterStream];
	else
		current_stream := @prev current_stream;
		current_stream_id := current_stream_id - 1;
	end if;
end sub;

sub EmitterOpenfile(filename: string) is
	if FCBOpenOut(&outfcb, filename) != 0 then
		SimpleError("cannot open output file");
	end if;
end sub;

sub EmitterClosefile() is
	WriteB8('E');
	WriteB16(0);
	if FCBClose(&outfcb) != 0 then
		SimpleError("cannot close output file");
	end if;
end sub;

sub EmitterDeclareSubroutine(subr: [Subroutine]) is
	var len := StrLen(subr.name) as uint16;

	WriteB8('N');
	WriteB16(len + 2);
	WriteB16(subr.id);
	FCBPutBlock(&outfcb, subr.name, len as intptr);
end sub;

sub EmitterDeclareExternalSubroutine(subrid: uint16, external: string) is
	var len := StrLen(external) as uint16;

	WriteB8('X');
	WriteB16(len + 2);
	WriteB16(subrid);
	FCBPutBlock(&outfcb, external, len as intptr);
end sub;

sub EmitterReferenceSubroutineById(user: uint16, used: uint16) is
	WriteB8('R');
	WriteB16(4);
	WriteB16(user);
	WriteB16(used);
end sub;

sub EmitterReferenceSubroutine(user: [Subroutine], used: [Subroutine]) is
	EmitterReferenceSubroutineById(user.id, used.id);
end sub;

sub EmitterDeclareWorkspace(subrid: SubrId, wid: uint8, workspace: Size) is
	WriteB8('W');
	WriteB16(5);
	WriteB16(subrid);
	WriteB8(wid);
	WriteB16(workspace as uint16);
end sub;

