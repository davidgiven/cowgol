const CACHE_SIZE := REGISTER_COUNT;

const CACHE_SLOT_EMPTY    := 0;
const CACHE_SLOT_CONSTANT := 1;
const CACHE_SLOT_WSREF    := 2;
const CACHE_SLOT_VALUE    := 3;

record CacheSlot is
	subr: [Subroutine];
	wsid: uint8;
	number: Word;
	reg: RegId;
	state: uint8;
end record;

var register_cache: CacheSlot[CACHE_SIZE];

sub RegCacheReset() is
	MemZero(&register_cache[0] as [uint8], @bytesof register_cache);
end sub;

sub RegCacheFlush(reg: RegId) is
	var p := &register_cache[0];
	while p != &register_cache[@sizeof register_cache] loop
		if (p.state != CACHE_SLOT_EMPTY) and ((reg & p.reg) != 0) then
			p.state := CACHE_SLOT_EMPTY;
		end if;
		p := @next p;
	end loop;
end sub;

sub RegCacheFlushValues() is
	var p := &register_cache[0];
	while p != &register_cache[@sizeof register_cache] loop
		if (p.state == CACHE_SLOT_VALUE) then
			p.state := CACHE_SLOT_EMPTY;
		end if;
		p := @next p;
	end loop;
end sub;

sub reg_i_find_empty_slot(): (slot: [CacheSlot]) is
	slot := &register_cache[0];
	while slot != &register_cache[@sizeof register_cache] loop
		if (slot.state == CACHE_SLOT_EMPTY) then
			return;
		end if;
		slot := @next slot;
	end loop;
	slot := 0 as [CacheSlot];
end sub;

sub RegCacheLeavesConstant(reg: RegId, value: Word) is
	var p := &register_cache[0];
	while p != &register_cache[@sizeof register_cache] loop
		if (p.state == CACHE_SLOT_CONSTANT) and (p.number == value) then
			p.reg := p.reg | reg;
			return;
		end if;
		p := @next p;
	end loop;

	p := reg_i_find_empty_slot();
	if p != nil then
		p.state := CACHE_SLOT_CONSTANT;
		p.number := value;
		p.reg := reg;
	end if;
end sub;

sub RegCacheLeavesWsRef(reg: RegId, subr: [Subroutine], wsid: uint8, off: Size) is
	var p := &register_cache[0];
	while p != &register_cache[@sizeof register_cache] loop
		if (p.state == CACHE_SLOT_WSREF) and (p.subr == subr) 
				and (p.wsid == wsid) and (p.number == (off as Word)) then
			p.reg := p.reg | reg;
			return;
		end if;
		p := @next p;
	end loop;

	p := reg_i_find_empty_slot();
	if p != nil then
		p.state := CACHE_SLOT_WSREF;
		p.subr := subr;
		p.wsid := wsid;
		p.number := off as Word;
		p.reg := reg;
	end if;
end sub;

sub RegCacheLeavesAddress(reg: RegId, sym: [Symbol], off: Size) is
	RegCacheLeavesWsRef(reg, sym.subr, sym.wsid, sym.off + off);
end sub;

sub RegCacheLeavesValue(reg: RegId, sym: [Symbol], off: Size) is
	off := sym.off + off;
	var p := &register_cache[0];
	while p != &register_cache[@sizeof register_cache] loop
		if (p.state == CACHE_SLOT_VALUE) and (p.subr == sym.subr)
				and (p.wsid == sym.wsid) and (p.number == (off as Word)) then
			p.reg := p.reg | reg;
			return;
		end if;
		p := @next p;
	end loop;

	p := reg_i_find_empty_slot();
	if p != nil then
		p.state := CACHE_SLOT_VALUE;
		p.subr := sym.subr;
		p.wsid := sym.wsid;
		p.number := off as Word;
		p.reg := reg;
	end if;
end sub;

sub RegCacheFindConstant(value: Word): (reg: RegId) is
	reg := 0;
	var p := &register_cache[0];
	while p != &register_cache[@sizeof register_cache] loop
		if (p.state == CACHE_SLOT_CONSTANT) and (p.number == value) then
			reg := p.reg;
			return;
		end if;
		p := @next p;
	end loop;
end sub;

sub RegCacheFindWsRef(subr: [Subroutine], wsid: uint8, off: Size): (reg: RegId) is
	reg := 0;
	var p := &register_cache[0];
	while p != &register_cache[@sizeof register_cache] loop
		if (p.state == CACHE_SLOT_WSREF) and (p.subr == subr) 
				and (p.wsid == wsid) and (p.number == (off as Word)) then
			reg := p.reg;
			return;
		end if;
		p := @next p;
	end loop;
end sub;

sub RegCacheFindAddress(sym: [Symbol], off: Size): (reg: RegId) is
	reg := RegCacheFindWsRef(sym.subr, sym.wsid, sym.off + off);
end sub;

sub RegCacheFindValue(sym: [Symbol], off: Size): (reg: RegId) is
	reg := 0;
	off := sym.off + off;
	var p := &register_cache[0];
	while p != &register_cache[@sizeof register_cache] loop
		if (p.state == CACHE_SLOT_VALUE) and (p.subr == sym.subr)
				and (p.wsid == sym.wsid) and (p.number == (off as Word)) then
			reg := p.reg;
			return;
		end if;
		p := @next p;
	end loop;
end sub;

