%{
	const VARSTACK_SIZE := 64;
	typedef Slot is uint16;
	var varstack: Slot[VARSTACK_SIZE];
	var varsp: uint8;
	var varid: Slot := 1;

	sub ArchAlignUp(value: Size, alignment: uint8): (newvalue: Size) is
		var a := (alignment-1) as Size;
		newvalue := (value+a) & ~a;
	end sub;

	sub E_subref_sig(subr: [Subroutine]) is
		EmitterOpenStream(current_subr);

		E("\tvoid ");
		E_subref(subr);
		E("(void);\n");

		EmitterCloseStream();
		E_subref(subr);
	end sub;

	sub E_symref(sym: [Symbol], off: Size) is
		if sym.wsid == WSID_STATIC then
			E("(i1*)");
			E_wsref(sym.subr.id, sym.wsid, sym.off);
			if off != 0 then
				E_i16(off as int16);
			end if;
		else
			E_wsref(sym.subr.id, sym.wsid, sym.off + off);
		end if;
	end sub;

	sub ArchEndInstruction() is
	end sub;

	sub ArchEndGroup() is
		E_nl();
	end sub;

	sub PushVid(vid: Slot) is
		if varsp == VARSTACK_SIZE then
			SimpleError("varstack overflow");
		end if;
		varstack[varsp] := vid;
		varsp := varsp + 1;
	end sub;

	sub Push(): (vid: Slot) is
		vid := varid;
		varid := varid + 1;
		PushVid(vid);
		#E("/* push v");
		#E_u16(vid);
		#E(" at ");
		#E_u8(varsp);
		#E(" */");
	end sub;

	sub CheckVarstackUnderflow() is
		if varsp == 0 then
			SimpleError("varstack underflow");
		end if;
	end sub;

	sub Pop(): (vid: Slot) is
		CheckVarstackUnderflow();
		varsp := varsp - 1;
		vid := varstack[varsp];
		#E("/* pop v");
		#E_u16(vid);
		#E(" at ");
		#E_u8(varsp);
		#E(" */");
	end sub;

	sub Peek(): (vid: Slot) is
		CheckVarstackUnderflow();
		vid := varstack[varsp-1];
	end sub;

    sub ArchBeginComment() is
        E("\t// ");
    end sub;

    sub ArchEndComment() is
        E_nl();
    end sub;

	# Note that this *destroys* the source register.
	sub ArchEmitMove(src: RegId, dest: RegId) is
	end sub;
%}

wordsize uint32;

register v1 v2 v4 v8 param;

regdata v1 stacked;
regdata v2 stacked;
regdata v4 stacked;
regdata v8 stacked;
regdata param;

// --- Core things ----------------------------------------------------------

gen STARTFILE();
gen ENDFILE();

gen LABEL():b
{
	E_labelref($b.label);
	E(":;\n");
}

gen JUMP():j
{
	E("\tgoto ");
	E_labelref($j.label);
	E(";\n");
}

gen RETURN()
{
	E("\tif (passer2normalcall) {\n");
	E("\t\ttframe_ptr->activated = 1;\n");
	E("\t}\n");
	E("\treturn;\n");
}

// --- Subroutines ----------------------------------------------------------

gen STARTSUB():s
{
	EmitterOpenStream(current_subr);

	E("\n// ");
	E(current_subr.name);
	E(" workspace at ");
	E_b8(COO_ESCAPE_WSREF);
	E_b16(current_subr.id);
	E_b8(0);
	E_b16(0);
	E(" length ");
	E_b8(COO_ESCAPE_WSSIZE);
	E_b16(current_subr.id);
	E_b8(0);
	E("\nvoid ");
	E_subref(current_subr);
	E("(void) {\n");
	E("i1 passer2normalcall = 0;");
	E("\tif (tframe_ptr->activated) {\n");
	E("\t\tif (!(tframe_ptr->tramp2function)) {\n");
	E("\t\t\tpasser2normalcall = 1;\n");
	E("\t\t\ttframe_ptr->activated = 0;\n");
	E("\t\t}\n");
	E("\t\ttframe_ptr->tramp2function = 0;\n");
	E("\t}\n");
}

gen ENDSUB()
{
	E("\tif (passer2normalcall) {\n");
	E("\t\ttframe_ptr->activated = 1;\n");
	E("\t}\n");
	E("}\n");
	EmitterCloseStream();
}

%{
	# subr here is the *interface*.
	sub Call(subrid: SubrId) is
		var subr := FindSubr(subrid);
		var pid := Pop();

		# Call the subroutine itself.

		E("\n\t((void(*)(void))(intptr_t)v");
		E_u16(pid);
		E(")();\n");
	end sub;

	# subr here is the *interface*.
	sub Tailcall(subrid: SubrId) is
		var subr := FindSubr(subrid);
		var pid := Pop();

		# Call the subroutine itself.

		E("\n\tTAILCALL(((void(*)(void))(intptr_t)v");
		E_u16(pid);
		E("));\n");
	end sub;


	sub PokeArg(width: uint8, sym: [Symbol]) is
		var vid := Pop();

		E("\t*(i");
		E_u8(width);
		E("*)(intptr_t)(");
		E_symref(sym, 0);
		E(") = v");
		E_u16(vid);
		E(";\n");
	end sub;

	sub PeekArg(width: uint8, sym: [Symbol]) is
		var vid := Push();

		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = *(i");
		E_u8(width);
		E("*)(intptr_t)(");
		E_symref(sym, 0);
		E(");\n");
	end sub;
%}

gen       CALL(  param, v8):s { Call($s.subr.id); }
gen   TAILCALL(  param, v8):s { Tailcall($s.subr.id); }

gen PREPARETAIL();

gen param := END();
gen param := ARG1(param, v1):a { PokeArg(1, &$a.sym); }
gen param := ARG2(param, v2):a { PokeArg(2, &$a.sym); }
gen param := ARG4(param, v4):a { PokeArg(4, &$a.sym); }
gen param := ARG8(param, v8):a { PokeArg(8, &$a.sym); }

gen v1 := POPARG1():a { PeekArg(1, &$a.sym); }
gen v2 := POPARG2():a { PeekArg(2, &$a.sym); }
gen v4 := POPARG4():a { PeekArg(4, &$a.sym); }
gen v8 := POPARG8():a { PeekArg(8, &$a.sym); }

// --- Core conversions --------------------------------------------------

%{
	sub LoadConstant(width: uint8, value: Arith) is
		var vid := Push();

		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = (i");
		E_u8(width);
		E(")");
		E_i32(value as int32);
		E(";\n");
	end sub;
%}

gen v1 := CONSTANT():c { LoadConstant(1, $c.value); }
gen v2 := CONSTANT():c { LoadConstant(2, $c.value); }
gen v4 := CONSTANT():c { LoadConstant(4, $c.value); }
gen v8 := CONSTANT():c { LoadConstant(8, $c.value); }

gen v8 := ADDRESS():a
{
	var vid := Push();

	E("\ti8 v");
	E_u16(vid);
	E(" = (i8)(intptr_t)(");
	E_symref(&$a.sym, $a.off);
	E(");\n");
}

gen v8 := SUBREF():a
{
	var vid := Push();

	E("\ti8 v");
	E_u16(vid);
	E(" = (i8)(intptr_t)(");
	E_subref_sig($a.subr);
	E(");\n");
}

// --- Loads and stores -----------------------------------------------------

%{
	sub StoreVV(width: uint8) is
		var addrid := Pop();
		var valid := Pop();
		E("\t*(i");
		E_u8(width);
		E("*)(intptr_t)v");
		E_u16(addrid);
		E(" = v");
		E_u16(valid);
		E(";\n");
	end sub;

	sub LoadVV(width: uint8) is
		var addrid := Pop();
		var valid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(valid);
		E(" = *(i");
		E_u8(width);
		E("*)(intptr_t)v");
		E_u16(addrid);
		E(";\n");
	end sub;
%}

gen STORE1(v1:val, DEREF1(v8:addr)) { StoreVV(1); }
gen STORE2(v2:val, DEREF2(v8:addr)) { StoreVV(2); }
gen STORE4(v4:val, DEREF4(v8:addr)) { StoreVV(4); }
gen STORE8(v8:val, DEREF8(v8:addr)) { StoreVV(8); }

gen v1 := DEREF1(v8:addr) { LoadVV(1); }
gen v2 := DEREF2(v8:addr) { LoadVV(2); }
gen v4 := DEREF4(v8:addr) { LoadVV(4); }
gen v8 := DEREF8(v8:addr) { LoadVV(8); }

// --- Maths ----------------------------------------------------------------

%{
	sub Op2VV(width: uint8, op: string) is
		var rhsid := Pop();
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = v");
		E_u16(lhsid);
		E(op);
		E("v");
		E_u16(rhsid);
		E(";\n");
	end sub;

	sub Op2VC(width: uint8, op: string, rhs: Arith) is
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = v");
		E_u16(lhsid);
		E(op);
		E("(");
		E_i32(rhs);
		E(");\n");
	end sub;

	sub Op2VVSigned(width: uint8, op: string) is
		var rhsid := Pop();
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = (s");
		E_u8(width);
		E(")v");
		E_u16(lhsid);
		E(op);
		E("(s");
		E_u8(width);
		E(")v");
		E_u16(rhsid);
		E(";\n");
	end sub;

	sub Op2VCSigned(width: uint8, op: string, rhs: Arith) is
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = v");
		E_u16(lhsid);
		E(op);
		E("(");
		E_i32(rhs);
		E(");\n");
	end sub;
%}

gen v1 := ADD1(v1:lhs, v1:rhs)          { Op2VV(1, "+"); }
gen v2 := ADD2(v2:lhs, v2:rhs)          { Op2VV(2, "+"); }
gen v4 := ADD4(v4:lhs, v4:rhs)          { Op2VV(4, "+"); }
gen v8 := ADD8(v8:lhs, v8:rhs)          { Op2VV(8, "+"); }
gen v1 := ADD1(v1:lhs, CONSTANT():rhs)  { Op2VC(1, "+", $rhs.value); }
gen v2 := ADD2(v2:lhs, CONSTANT():rhs)  { Op2VC(2, "+", $rhs.value); }
gen v4 := ADD4(v4:lhs, CONSTANT():rhs)  { Op2VC(4, "+", $rhs.value); }
gen v8 := ADD8(v8:lhs, CONSTANT():rhs)  { Op2VC(8, "+", $rhs.value); }

gen v1 := SUB1(v1:lhs, v1:rhs)          { Op2VV(1, "-"); }
gen v2 := SUB2(v2:lhs, v2:rhs)          { Op2VV(2, "-"); }
gen v4 := SUB4(v4:lhs, v4:rhs)          { Op2VV(4, "-"); }
gen v8 := SUB8(v8:lhs, v8:rhs)          { Op2VV(8, "-"); }
gen v1 := SUB1(v1:lhs, CONSTANT():rhs)  { Op2VC(1, "-", $rhs.value); }
gen v2 := SUB2(v2:lhs, CONSTANT():rhs)  { Op2VC(2, "-", $rhs.value); }
gen v4 := SUB4(v4:lhs, CONSTANT():rhs)  { Op2VC(4, "-", $rhs.value); }
gen v8 := SUB8(v8:lhs, CONSTANT():rhs)  { Op2VC(8, "-", $rhs.value); }

gen v1 := MUL1(v1:lhs, v1:rhs)          { Op2VV(1, "*"); }
gen v2 := MUL2(v2:lhs, v2:rhs)          { Op2VV(2, "*"); }
gen v4 := MUL4(v4:lhs, v4:rhs)          { Op2VV(4, "*"); }
gen v8 := MUL8(v8:lhs, v8:rhs)          { Op2VV(8, "*"); }
gen v1 := MUL1(v1:lhs, CONSTANT():rhs)  { Op2VC(1, "*", $rhs.value); }
gen v2 := MUL2(v2:lhs, CONSTANT():rhs)  { Op2VC(2, "*", $rhs.value); }
gen v4 := MUL4(v4:lhs, CONSTANT():rhs)  { Op2VC(4, "*", $rhs.value); }
gen v8 := MUL8(v8:lhs, CONSTANT():rhs)  { Op2VC(8, "*", $rhs.value); }

gen v1 := DIVU1(v1:lhs, v1:rhs)         { Op2VV(1, "/"); }
gen v2 := DIVU2(v2:lhs, v2:rhs)         { Op2VV(2, "/"); }
gen v4 := DIVU4(v4:lhs, v4:rhs)         { Op2VV(4, "/"); }
gen v8 := DIVU8(v8:lhs, v8:rhs)         { Op2VV(8, "/"); }
gen v1 := DIVU1(v1:lhs, CONSTANT():rhs) { Op2VC(1, "/", $rhs.value); }
gen v2 := DIVU2(v2:lhs, CONSTANT():rhs) { Op2VC(2, "/", $rhs.value); }
gen v4 := DIVU4(v4:lhs, CONSTANT():rhs) { Op2VC(4, "/", $rhs.value); }
gen v8 := DIVU8(v8:lhs, CONSTANT():rhs) { Op2VC(8, "/", $rhs.value); }

gen v1 := REMU1(v1:lhs, v1:rhs)         { Op2VV(1, "%"); }
gen v2 := REMU2(v2:lhs, v2:rhs)         { Op2VV(2, "%"); }
gen v4 := REMU4(v4:lhs, v4:rhs)         { Op2VV(4, "%"); }
gen v8 := REMU8(v8:lhs, v8:rhs)         { Op2VV(8, "%"); }
gen v1 := REMU1(v1:lhs, CONSTANT():rhs) { Op2VC(1, "%", $rhs.value); }
gen v2 := REMU2(v2:lhs, CONSTANT():rhs) { Op2VC(2, "%", $rhs.value); }
gen v4 := REMU4(v4:lhs, CONSTANT():rhs) { Op2VC(4, "%", $rhs.value); }
gen v8 := REMU8(v8:lhs, CONSTANT():rhs) { Op2VC(8, "%", $rhs.value); }

gen v1 := DIVS1(v1:lhs, v1:rhs)         { Op2VVSigned(1, "/"); }
gen v2 := DIVS2(v2:lhs, v2:rhs)         { Op2VVSigned(2, "/"); }
gen v4 := DIVS4(v4:lhs, v4:rhs)         { Op2VVSigned(4, "/"); }
gen v8 := DIVS8(v8:lhs, v8:rhs)         { Op2VVSigned(8, "/"); }
gen v1 := DIVS1(v1:lhs, CONSTANT():rhs) { Op2VCSigned(1, "/", $rhs.value); }
gen v2 := DIVS2(v2:lhs, CONSTANT():rhs) { Op2VCSigned(2, "/", $rhs.value); }
gen v4 := DIVS4(v4:lhs, CONSTANT():rhs) { Op2VCSigned(4, "/", $rhs.value); }
gen v8 := DIVS8(v8:lhs, CONSTANT():rhs) { Op2VCSigned(8, "/", $rhs.value); }

gen v1 := REMS1(v1:lhs, v1:rhs)         { Op2VVSigned(1, "%"); }
gen v2 := REMS2(v2:lhs, v2:rhs)         { Op2VVSigned(2, "%"); }
gen v4 := REMS4(v4:lhs, v4:rhs)         { Op2VVSigned(4, "%"); }
gen v8 := REMS8(v8:lhs, v8:rhs)         { Op2VVSigned(8, "%"); }
gen v1 := REMS1(v1:lhs, CONSTANT():rhs) { Op2VCSigned(1, "%", $rhs.value); }
gen v2 := REMS2(v2:lhs, CONSTANT():rhs) { Op2VCSigned(2, "%", $rhs.value); }
gen v4 := REMS4(v4:lhs, CONSTANT():rhs) { Op2VCSigned(4, "%", $rhs.value); }
gen v8 := REMS8(v8:lhs, CONSTANT():rhs) { Op2VCSigned(8, "%", $rhs.value); }

gen v1 := AND1(v1:lhs, v1:rhs)          { Op2VV(1, "&"); }
gen v2 := AND2(v2:lhs, v2:rhs)          { Op2VV(2, "&"); }
gen v4 := AND4(v4:lhs, v4:rhs)          { Op2VV(4, "&"); }
gen v8 := AND8(v8:lhs, v8:rhs)          { Op2VV(8, "&"); }
gen v1 := AND1(v1:lhs, CONSTANT():rhs)  { Op2VC(1, "&", $rhs.value); }
gen v2 := AND2(v2:lhs, CONSTANT():rhs)  { Op2VC(2, "&", $rhs.value); }
gen v4 := AND4(v4:lhs, CONSTANT():rhs)  { Op2VC(4, "&", $rhs.value); }
gen v8 := AND8(v8:lhs, CONSTANT():rhs)  { Op2VC(8, "&", $rhs.value); }

gen v1 := OR1(v1:lhs, v1:rhs)           { Op2VV(1, "|"); }
gen v2 := OR2(v2:lhs, v2:rhs)           { Op2VV(2, "|"); }
gen v4 := OR4(v4:lhs, v4:rhs)           { Op2VV(4, "|"); }
gen v8 := OR8(v8:lhs, v8:rhs)           { Op2VV(8, "|"); }
gen v1 := OR1(v1:lhs, CONSTANT():rhs)   { Op2VC(1, "|", $rhs.value); }
gen v2 := OR2(v2:lhs, CONSTANT():rhs)   { Op2VC(2, "|", $rhs.value); }
gen v4 := OR4(v4:lhs, CONSTANT():rhs)   { Op2VC(4, "|", $rhs.value); }
gen v8 := OR8(v8:lhs, CONSTANT():rhs)   { Op2VC(8, "|", $rhs.value); }

gen v1 := EOR1(v1:lhs, v1:rhs)          { Op2VV(1, "^"); }
gen v2 := EOR2(v2:lhs, v2:rhs)          { Op2VV(2, "^"); }
gen v4 := EOR4(v4:lhs, v4:rhs)          { Op2VV(4, "^"); }
gen v8 := EOR8(v8:lhs, v8:rhs)          { Op2VV(8, "^"); }
gen v1 := EOR1(v1:lhs, CONSTANT():rhs)  { Op2VC(1, "^", $rhs.value); }
gen v2 := EOR2(v2:lhs, CONSTANT():rhs)  { Op2VC(2, "^", $rhs.value); }
gen v4 := EOR4(v4:lhs, CONSTANT():rhs)  { Op2VC(4, "^", $rhs.value); }
gen v8 := EOR8(v8:lhs, CONSTANT():rhs)  { Op2VC(8, "^", $rhs.value); }

%{
	sub Op1V(width: uint8, op: string) is
		var valid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = ");
		E(op);
		E("v");
		E_u16(valid);
		E(";\n");
	end sub;
%}

gen v1 := NEG1(v1) { Op1V(1, "-"); }
gen v2 := NEG2(v2) { Op1V(2, "-"); }
gen v4 := NEG4(v4) { Op1V(4, "-"); }
gen v8 := NEG8(v8) { Op1V(8, "-"); }
gen v1 := NOT1(v1) { Op1V(1, "~"); }
gen v2 := NOT2(v2) { Op1V(2, "~"); }
gen v4 := NOT4(v4) { Op1V(4, "~"); }
gen v8 := NOT8(v8) { Op1V(8, "~"); }

// --- Shifts ---------------------------------------------------------------

%{
	sub Shift(width: uint8, type: string, op: string) is
		var rhsid := Pop();
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(width);
		E(" v");
		E_u16(vid);
		E(" = ((");
		E(type);
		E(")v");
		E_u16(lhsid);
		E(")");
		E(op);
		E("v");
		E_u16(rhsid);
		E(";\n");
	end sub;
%}

gen v1 := LSHIFT1(v1, v1)  { Shift(1, "i1", "<<"); }
gen v2 := LSHIFT2(v2, v1)  { Shift(2, "i2", "<<"); }
gen v4 := LSHIFT4(v4, v1)  { Shift(4, "i4", "<<"); }
gen v8 := LSHIFT8(v8, v1)  { Shift(8, "i8", "<<"); }
gen v1 := RSHIFTU1(v1, v1) { Shift(1, "i1", ">>"); }
gen v2 := RSHIFTU2(v2, v1) { Shift(2, "i2", ">>"); }
gen v4 := RSHIFTU4(v4, v1) { Shift(4, "i4", ">>"); }
gen v8 := RSHIFTU8(v8, v1) { Shift(8, "i8", ">>"); }
gen v1 := RSHIFTS1(v1, v1) { Shift(1, "s1", ">>"); }
gen v2 := RSHIFTS2(v2, v1) { Shift(2, "s2", ">>"); }
gen v4 := RSHIFTS4(v4, v1) { Shift(4, "s4", ">>"); }
gen v8 := RSHIFTS8(v8, v1) { Shift(8, "s8", ">>"); }

// --- Branches -------------------------------------------------------------

%{
	sub Branch(node: [Node], op: string) is
		var rhsid := Pop();
		var lhsid := Pop();
		E("\tif (v");
		E_u16(lhsid);
		E(op);
		E("v");
		E_u16(rhsid);
		E(") goto ");
		E_labelref(node.beq.truelabel);
		E("; else goto ");
		E_labelref(node.beq.falselabel);
		E(";\n");
	end sub;

	sub BranchSigned(node: [Node], width: uint8, op: string) is
		var rhsid := Pop();
		var lhsid := Pop();
		E("\tif ((s");
		E_u8(width);
		E(")v");
		E_u16(lhsid);
		E(op);
		E("(s");
		E_u8(width);
		E(")v");
		E_u16(rhsid);
		E(") goto ");
		E_labelref(node.beq.truelabel);
		E("; else goto ");
		E_labelref(node.beq.falselabel);
		E(";\n");
	end sub;

	sub BranchConstant(node: [Node], lhs: Arith, rhs: Arith) is
		E("\tgoto ");
		if lhs == rhs then
			E_labelref(node.beq.truelabel);
		else
			E_labelref(node.beq.falselabel);
		end if;
		E(";\n");
	end sub;
%}

gen BEQ0(CONSTANT():c1, CONSTANT():c2):b { BranchConstant(self.n[0], $c1.value, $c2.value); }

gen BEQ1(v1:lhs, v1:rhs):b { Branch(self.n[0], "=="); }
gen BEQ2(v2:lhs, v2:rhs):b { Branch(self.n[0], "=="); }
gen BEQ4(v4:lhs, v4:rhs):b { Branch(self.n[0], "=="); }
gen BEQ8(v8:lhs, v8:rhs):b { Branch(self.n[0], "=="); }

gen BLTU1(v1:lhs, v1:rhs):b { Branch(self.n[0], "<"); }
gen BLTU2(v2:lhs, v2:rhs):b { Branch(self.n[0], "<"); }
gen BLTU4(v4:lhs, v4:rhs):b { Branch(self.n[0], "<"); }
gen BLTU8(v8:lhs, v8:rhs):b { Branch(self.n[0], "<"); }

gen BLTS1(v1:lhs, v1:rhs):b { BranchSigned(self.n[0], 1, "<"); }
gen BLTS2(v2:lhs, v2:rhs):b { BranchSigned(self.n[0], 2, "<"); }
gen BLTS4(v4:lhs, v4:rhs):b { BranchSigned(self.n[0], 4, "<"); }
gen BLTS8(v8:lhs, v8:rhs):b { BranchSigned(self.n[0], 8, "<"); }

// --- Case -----------------------------------------------------------------

%{
	sub Whencase(value: Arith, falselabel: LabelRef) is
		var vid := varstack[varsp-1];
		E("\tif (v");
		E_u16(vid);
		E(" != ");
		E_i32(value);
		E(") goto ");
		E_labelref(falselabel);
		E(";\n");
	end sub;
%}

gen STARTCASE1(v1);
gen STARTCASE2(v2);
gen STARTCASE4(v4);
gen STARTCASE8(v8);

gen WHENCASE1():c { Whencase($c.value & 0xff, $c.falselabel); }
gen WHENCASE2():c { Whencase($c.value & 0xffff, $c.falselabel); }
gen WHENCASE4():c { Whencase($c.value & 0xffffffff, $c.falselabel); }
gen WHENCASE8():c { Whencase($c.value, $c.falselabel); }

gen ENDCASE1() { varsp := varsp - 1; }
gen ENDCASE2() { varsp := varsp - 1; }
gen ENDCASE4() { varsp := varsp - 1; }
gen ENDCASE8() { varsp := varsp - 1; }

// --- Casts ----------------------------------------------------------------

%{
	sub Cast(src: uint8, dest: uint8, sext: uint8) is
		var lhsid := Pop();
		var vid := Push();
		E("\ti");
		E_u8(dest);
		E(" v");
		E_u16(vid);
		E(" = ");
		if sext != 0 then
			E("(s");
			E_u8(dest);
			E(")(s");
			E_u8(src);
			E(")");
		end if;
		E("v");
		E_u16(lhsid);
		E(";\n");
	end sub;
%}

gen v2 := CAST12(v1):c { Cast(1, 2, $c.sext); }
gen v4 := CAST14(v1):c { Cast(1, 4, $c.sext); }
gen v8 := CAST18(v1):c { Cast(1, 8, $c.sext); }
gen v1 := CAST21(v2):c { Cast(2, 1, $c.sext); }
gen v4 := CAST24(v2):c { Cast(2, 4, $c.sext); }
gen v8 := CAST28(v2):c { Cast(2, 8, $c.sext); }
gen v1 := CAST41(v4):c { Cast(4, 1, $c.sext); }
gen v2 := CAST42(v4):c { Cast(4, 2, $c.sext); }
gen v8 := CAST48(v4):c { Cast(4, 8, $c.sext); }
gen v1 := CAST81(v8):c { Cast(8, 1, $c.sext); }
gen v2 := CAST82(v8):c { Cast(8, 2, $c.sext); }
gen v4 := CAST84(v8):c { Cast(8, 4, $c.sext); }

// --- Strings --------------------------------------------------------------

%{
	var current_string_id: uint16 := 0;

	sub E_string(text: string): (sid: uint16) is
		sid := current_string_id;
		current_string_id := current_string_id + 1;

		EmitterOpenStream(current_subr);

		E("const i1 ");
		E_b8(COO_ESCAPE_THISCOO);
		E_b8('s');
		E_h16(sid);
		E("[] = { ");

		var first: uint8 := 1;
		loop
			var c := [text];
			text := text + 1;
			if c == 0 then
				break;
			end if;
			if first == 0 then
				E_comma();
			end if;
			first := 0;
			E("0x");
			E_h8(c);
		end loop;

		if first == 0 then
			E_comma();
		end if;
		E("0 };\n");
		EmitterCloseStream();
	end sub;
%}

gen v8 := STRING():s
{
	var vid := Push();
	E("\ti8 v");
	E_u16(vid);
	E(" = (i8)(intptr_t)");
	E_b8(COO_ESCAPE_THISCOO);
	E_b8('s');
	E_h16(E_string($s.text));
	E(";\n");
}

// --- Array initialisers ------------------------------------------------

%{
	# This is *vile*. We need to emit differentiated bytes... but also,
	# occasionally, pointers. We don't have any type information. So,
	# we can't just emit a byte array because we might need to embed
	# 8-byte pointers into it, which C doesn't allow. Instead, all
	# static initialisers end up as arrays of i8, and we buffer up bytes
	# to emit them in chunks of eight.

	var initialiser_buffer: uint8[8];
	var initialiser_buffer_fill_bytes: uint8 := 0;

	sub FlushInitialiserBuffer() is
		if initialiser_buffer_fill_bytes != 0 then
			E("\t{ .i1 = { ");
			var i: uint8 := 0;
			while i != initialiser_buffer_fill_bytes loop
				if i != 0 then
					E_comma();
				end if;
				E("0x");
				E_h8(initialiser_buffer[i]);
				i := i + 1;
			end loop;
			E("}},\n");
			initialiser_buffer_fill_bytes := 0;
		end if;
	end sub;

	sub E_bytes(ptr: [uint8], width: uint8) is
		while width != 0 loop
			initialiser_buffer[initialiser_buffer_fill_bytes] := [ptr];
			ptr := ptr + 1;
			initialiser_buffer_fill_bytes := initialiser_buffer_fill_bytes + 1;

			if initialiser_buffer_fill_bytes == @sizeof initialiser_buffer then
				FlushInitialiserBuffer();
			end if;
			width := width - 1;
		end loop;
	end sub;

	sub CheckBufferAlignment() is
		if initialiser_buffer_fill_bytes != 0 then
			StartError();
			print("bad initialiser alignment: ");
			print_i8(initialiser_buffer_fill_bytes);
			EndError();
		end if;
	end sub;
%}

gen STARTINIT():s
{
	EmitterOpenStream(current_subr);

	E("static data ");
	E_wsref($s.sym.subr.id, $s.sym.wsid, $s.sym.off);
	E("[] = {\n");

	initialiser_buffer_fill_bytes := 0;
}
	
gen INIT1():c { E_bytes(&$c.value as [uint8], 1); }
gen INIT2():c { E_bytes(&$c.value as [uint8], 2); }
gen INIT4():c { E_bytes(&$c.value as [uint8], 4); }
gen INIT8():c { E_bytes(&$c.value as [uint8], 8); }

gen INITSUBREF():a
{
	CheckBufferAlignment();

	E("\t{ .ptr = (void*)");
	E_subref_sig($a.subr);
	E(" },\n");
}

gen INITADDRESS():a
{
	CheckBufferAlignment();

	E("\t{ .ptr = (void*)");
	E_symref(&$a.sym, $a.off);
	E(" },\n");
}

gen INITSTRING():s
{
	CheckBufferAlignment();

	E("\t{ .ptr = (void*)");
	E_b8(COO_ESCAPE_THISCOO);
	E_b8('s');
	E_h16(E_string($s.text));
	E(" },\n");
}

gen ENDINIT()
{
	FlushInitialiserBuffer();
	E("};\n");
	EmitterCloseStream();
}

// --- Inline assembly ------------------------------------------------------

gen ASMGROUPSTART();
gen ASMGROUPEND();

gen ASMSTART()
{
	E_tab();
}

gen ASMTEXT():t
{
	E($t.text);
	E_space();
}

gen ASMSYMBOL():s
{
	E("*(i");
	E_u8($s.sym.width as uint8);
	E("*)(intptr_t)(");
	E_symref(&$s.sym, 0);
	E(")");
	E_space();
}

gen ASMSUBREF():s
{
	E("(intptr_t)(");
	E_subref_sig($s.subr);
	E(")");
	E_space();
}

gen ASMVALUE():c
{
	E_b8('(');
	E_i32($c.value);
	E_b8(')');
}

gen ASMEND()
{
    E_nl();
}



