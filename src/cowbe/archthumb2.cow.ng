%[
	record ImmOp is
		value: Arith;
	end record;

	record Operand is
		imm @at(0): ImmOp;
	end record;
%]

%{
	sub ArchAlignUp(value: Size, alignment: uint8): (newvalue: Size) is
		var a := (alignment-1) as Size;
		newvalue := (value+a) & ~a;
	end sub;

	sub E_symref(sym: [Symbol], off: Size) is
		if sym.wsid == WSID_STATIC then
			E_wsref(sym.subr.id, sym.wsid, sym.off);
			if off != 0 then
				E_i16(off as int16);
			end if;
		else
			E_wsref(sym.subr.id, sym.wsid, sym.off + off);
		end if;
	end sub;

	sub R_flushall() is
		RegCacheFlush(ALL_REGS);
	end sub;

	sub R_flush(reg: RegId) is
		RegCacheFlush(FindConflictingRegisters(reg));
	end sub;

	sub AllocPLabel(): (lid: uint16) is
		# Cheap and cheerful way to allocate a label which won't overlap the
		# frontend's numbering.
		lid := -AllocLabel();
	end sub;

	sub E_label(label: LabelRef) is
		E_labelref(label);
		E(":\n");
	end sub;

	sub E_reg(reg: RegId) is
		case reg is
			when REG_R0: E("r0");
			when REG_R1: E("r1");
			when REG_R2: E("r2");
			when REG_R3: E("r3");
			when REG_R4: E("r4");
			when REG_R5: E("r5");
			when REG_R6: E("r6");
			when REG_R7: E("r7");
			when else:
				StartError();
				print("bad reg ");
				print_hex_i16(reg);
				EndError();
		end case;
	end sub;

	sub E_insn(insn: string) is
		E_tab();
		E(insn);
		E_space();
	end sub;

	sub E_push(reg: RegId) is
		E_insn("push");
		E_b8('{');
		E_reg(reg);
		E_b8('}');
		E_nl();
	end sub;

	sub E_pop(reg: RegId) is
		R_flush(reg);
		E_insn("pop");
		E_b8('{');
		E_reg(reg);
		E_b8('}');
		E_nl();
	end sub;

	sub E_jump(insn: string, label: LabelRef) is
		E_insn(insn);
		E_labelref(label);
		E_nl();
	end sub;

	sub E_b(label: LabelRef) is
		E_jump("b", label);
		E("\t.pool\n");
	end sub;

	sub E_op(rhs: RegId, rhsop: [Operand]) is
		if (rhs & REGCLASS_R32) != 0 then
			E_reg(rhs);
		elseif rhs == REG_IMM5 then
			E_b8('#');
			E_u8(rhsop.imm.value as uint8);
		elseif rhs == REG_IMM8 then
			E_b8('#');
			E_i8(rhsop.imm.value as int8);
		elseif rhs == REG_IMM16 then
			E_b8('#');
			E_u16(rhsop.imm.value as uint16);
		else
			SimpleError("bad op");
		end if;
	end sub;

	sub is_u5(value: Arith): (result: uint8) is
		if (value >= 0) and (value <= 31) then
			result := 1;
		else
			result := 0;
		end if;
	end sub;

	sub is_i8(value: Arith): (result: uint8) is
		if (value >= -128) and (value <= 127) then
			result := 1;
		else
			result := 0;
		end if;
	end sub;

	sub is_u16(value: Arith): (result: uint8) is
		if (value >= 0) and (value <= 65535) then
			result := 1;
		else
			result := 0;
		end if;
	end sub;

	sub is_short(sym: [Symbol]): (result: uint8) is
		result := 0;
		if (sym.subr == current_subr) and (sym.off < 4000) and (sym.off >= 0) and (sym.wsid == 0) then
			result := 1;
		end if;
	end sub;

    sub ArchBeginComment() is
        E("\t# ");
    end sub;

    sub ArchEndComment() is
        E_nl();
    end sub;

	sub ArchEmitMove(src: RegId, dest: RegId) is
		if src == 0 then
			E_pop(dest);
		elseif dest == 0 then
			E_push(src);
		elseif ((src & REGCLASS_R32) != 0) and ((dest & REGCLASS_R32) != 0) then
			E_insn("mov");
			E_reg(dest);
			E_comma();
			E_reg(src);
			E_nl();
		else
			StartError();
			print("bad move ");
			print_hex_i16(src);
			print(" -> ");
			print_hex_i16(dest);
			EndError();
		end if;
	end sub;

	sub ArchEndInstruction() is
	end sub;

	sub ArchEndGroup() is
	end sub;
%}

wordsize uint32;

register r0 r1 r2 r3 r4 r5 r6 r7;

operand param;
operand imm5 imm8 imm16;

regclass r32 := r0|r1|r2|r3|r4|r5|r6;

regdata r0 compatible r32;
regdata r1 compatible r32;
regdata r2 compatible r32;
regdata r3 compatible r32;
regdata r4 compatible r32;
regdata r5 compatible r32;
regdata r6 compatible r32;

// --- Core things ----------------------------------------------------------

gen STARTFILE();
gen ENDFILE();

gen LABEL():b uses all
{
	R_flushall();
	E_label($b.label);
}

gen JUMP():j uses all
{
	R_flushall();
	E_b($j.label);
}

// --- Subroutines ----------------------------------------------------------

gen STARTSUB() uses all
{
	RegCacheReset();

	EmitterOpenStream(current_subr);

	E("\n\n\t# ");
	E(current_subr.name);
	E(" workspace at ");
	E_b8(COO_ESCAPE_WSREF);
	E_b16(current_subr.id);
	E_b8(0);
	E_b16(0);
	E(" length ");
	E_b8(COO_ESCAPE_WSSIZE);
	E_b16(current_subr.id);
	E_b8(0);
	E_nl();

	E(".text\n");
	E(".thumb_func\n");
	E_b8(COO_ESCAPE_THISSUB);
	E(":\n");

	var count := current_subr.num_input_parameters;
	if count == 0 then
		E("\tpush {r7, lr}\n");
		E("\tldr r7, =");
		E_wsref(current_subr.id, 0, 0);
		E_nl();
	else
		E("\tmov r2, r7\n");
		E("\tldr r7, =");
		E_wsref(current_subr.id, 0, 0);
		E_nl();

		var lastparam := count - 1;

		while count != 0 loop
			count := count - 1;
			var param := GetInputParameter(current_subr, count);

			var reg: RegId;
			if count != lastparam then
				E_pop(REG_R0);
			end if;
			if param.subr != current_subr then
				E("\tldr r1, =");
				E_symref(param as [Symbol], 0);
				E_nl();
			end if;

			case param.width is
				when 1: E("\tstrb");
				when 2: E("\tstrh");
				when 4: E("\tstr");
			end case;
			if param.subr != current_subr then
				E(" r0, [r1]\n");
			else
				E(" r0, [r7, #");
				E_u16(param.off);
				E("]\n");
			end if;
		end loop;

		E("\tpush {r2, lr}\n");
	end if;

	R_flushall();
}

gen ENDSUB() uses all
{
	E("end_");
	E_subref(current_subr);
	E(":\n");

	var count: uint8 := 0;
	var params := current_subr.num_output_parameters;

	if params == 0 then
		E("\tpop {r7, pc}\n");
	else
		E("\tpop {r2, lr}\n");

		while count != params loop
			var param := GetOutputParameter(current_subr, count);

			if param.subr != current_subr then
				E("\tldr r1, =");
				E_symref(param as [Symbol], 0);
				E_nl();
			end if;

			case param.width is
				when 1: E("\tldrb");
				when 2: E("\tldrh");
				when 4: E("\tldr");
			end case;

			if param.subr == current_subr then
				E(" r0, [r7, #");
				E_u16(param.off);
				E("]\n");
			else
				E(" r0, [r1]\n");
			end if;

			if count != (params-1) then
				E_push(REG_R0);
			end if;

			count := count + 1;
		end loop;

		E("\tmov r7, r2\n");
		E("\tbx lr\n");
	end if;

	E("\t.pool\n");
	EmitterCloseStream();
	R_flushall();
}

gen RETURN() uses all
{
	R_flushall();
	E("\tb end_");
	E_subref(current_subr);
	E_nl();
}

// --- Miscellaneous --------------------------------------------------------

gen r32 := SUBREF():s
{
	R_flush($$);
	E_insn("ldr");
	E_reg($$);
	E(", =");
    E_subref($s.subr);
    E_nl();
}

gen r32 := CONSTANT():c
{
	var r := RegCacheFindConstant($c.value as uint32);
	if r != 0 then
		if r == $$ then
			return;
		end if;
		E_insn("mov");
		E_reg($$);
		E_comma();
		E_reg(r);
		E_nl();
	else
		if ($c.value >= 0) and ($c.value <= 65535) then
			E_insn("mov");
			E_reg($$);
			E_comma();
			E(" #");
			E_u16($c.value as uint16);
			E_nl();
		elseif ($c.value >= -128) and ($c.value <= 127) then
			E_insn("mov");
			E_reg($$);
			E_comma();
			E(" #");
			E_i16($c.value as int16);
			E_nl();
		else
			E_insn("ldr");
			E_reg($$);
			E_comma();
			E("=0x");
			E_h32($c.value as uint32);
			E_nl();
		end if;
	end if;

	R_flush($$);
	RegCacheLeavesConstant($$, $c.value as uint32);
}

gen r32 := ADDRESS():a
{
	var r := RegCacheFindAddress(&$a.sym, $a.off);
	if r != 0 then
		if r == $$ then
			return;
		end if;
		E_insn("mov");
		E_reg($$);
		E_comma();
		E_reg(r);
	elseif ($a.sym.subr == current_subr) and ($a.sym.wsid == 0) and ($a.sym.off < 4000) then
		E_insn("add");
		E_reg($$);
		E(", r7, #");
		E_u16($a.sym.off + $a.off);
	else
		E_insn("ldr");
		E_reg($$);
		E(", =");
		E_symref(&$a.sym, $a.off);
	end if;
	E_nl();

	R_flush($$);
	RegCacheLeavesAddress($$, &$a.sym, $a.off);
}

// --- Calls ----------------------------------------------------------------

%{
	sub Call(addr: [MidcodeSubref]) is
		R_flushall();
		E_insn("bl");
		E_subref(addr.subr);
		E_nl();
	end sub;

	sub Tailcall(addr: [MidcodeSubref]) is
		E("\tmov r7, r2\n");
		R_flushall();
		E_insn("b");
		E_subref(addr.subr);
		E_nl();
	end sub;

	sub CallR1() is
		R_flushall();
		E("\tblx r1\n");
	end sub;

	sub TailcallR1() is
		E("\tmov r7, r2\n");
		R_flushall();
		E("\tbx r1\n");
	end sub;
%}

gen       CALL(       param,      SUBREF():a) uses all { Call(&$a); }
gen       CALL(  ARG1(param, r0), SUBREF():a) uses all { Call(&$a); }
gen       CALL(  ARG2(param, r0), SUBREF():a) uses all { Call(&$a); }
gen       CALL(  ARG4(param, r0), SUBREF():a) uses all { Call(&$a); }

gen   TAILCALL(       param,      SUBREF():a) uses all { Tailcall(&$a); }
gen   TAILCALL(  ARG1(param, r0), SUBREF():a) uses all { Tailcall(&$a); }
gen   TAILCALL(  ARG2(param, r0), SUBREF():a) uses all { Tailcall(&$a); }
gen   TAILCALL(  ARG4(param, r0), SUBREF():a) uses all { Tailcall(&$a); }

gen       CALL(       param,      r1) uses all { CallR1(); }
gen       CALL(  ARG1(param, r0), r1) uses all { CallR1(); }
gen       CALL(  ARG2(param, r0), r1) uses all { CallR1(); }
gen       CALL(  ARG4(param, r0), r1) uses all { CallR1(); }

gen   TAILCALL(       param,      r1) uses all { TailcallR1(); }
gen   TAILCALL(  ARG1(param, r0), r1) uses all { TailcallR1(); }
gen   TAILCALL(  ARG2(param, r0), r1) uses all { TailcallR1(); }
gen   TAILCALL(  ARG4(param, r0), r1) uses all { TailcallR1(); }

gen PREPARETAIL() {E("\tpop {r2, lr}\n");}

gen param := END();

gen param := ARG1(param, r32:lhs) { E_push($lhs); }
gen param := ARG2(param, r32:lhs) { E_push($lhs); }
gen param := ARG4(param, r32:lhs) { E_push($lhs); }

gen r0 := POPARG1(remaining==0);
gen r0 := POPARG2(remaining==0);
gen r0 := POPARG4(remaining==0);

gen r32 := POPARG1(remaining!=0) { E_pop($$); }
gen r32 := POPARG2(remaining!=0) { E_pop($$); }
gen r32 := POPARG4(remaining!=0) { E_pop($$); }

// --- Operands -------------------------------------------------------------

gen imm5 := CONSTANT(value is u5):c cost 5
{
	$@$.operand.imm.value := $c.value;
}

gen imm8 := CONSTANT(value is i8):c cost 5
{
	$@$.operand.imm.value := $c.value;
}

gen r32 := FALLBACK(imm16|imm8|imm5:rhs)
{
	R_flush($$);
	E_insn("mov");
	E_reg($$);
	E(", #");
	E_i32($@rhs.operand.imm.value);
	E_nl();
}

// --- Loads/stores ---------------------------------------------------------

%{
	sub StoreReg(src: RegId, insn: string, reg1: RegId, reg2: RegId, shift: uint8) is
		RegCacheFlushValues();
		E_insn(insn);
		E_reg(src);
		E(", [");
		E_reg(reg1);
		if reg2 != 0 then
			E_comma();
			E_reg(reg2);
			if shift != 0 then
				E(", lsl #");
				E_u8(shift);
			end if;
		end if;
		E("]\n");
	end sub;

	sub StoreAddress(src: RegId, insn: string, sym: [Symbol], off: Size) is
		RegCacheFlushValues();
		E_insn(insn);
		E_reg(src);
		E(", [r7, #");
		E_i16((sym.off + off) as int16);
		E("]\n");
		RegCacheLeavesValue(src, sym, off);
	end sub;

%}

gen STORE1(r32:lhs, DEREF1(r32:rhs))
	{ StoreReg($lhs, "strb", $rhs, 0, 0); }

gen STORE1(r32:lhs, DEREF1(ADDRESS(&sym is short):a))
	{ StoreAddress($lhs, "strb", &$a.sym, $a.off); }

gen STORE1(r32:lhs, DEREF1(ADD4(r32:ptr, r32:rhs)))
	{ StoreReg($lhs, "strb", $ptr, $rhs, 0); }

gen STORE2(r32:lhs, DEREF2(r32:rhs))
	{ StoreReg($lhs, "strh", $rhs, 0, 0); }

gen STORE2(r32:lhs, DEREF2(ADDRESS(&sym is short):a))
	{ StoreAddress($lhs, "strh", &$a.sym, $a.off); }

gen STORE2(r32:lhs, DEREF2(ADD4(r32:ptr, r32:rhs)))
	{ StoreReg($lhs, "strh", $ptr, $rhs, 0); }

gen STORE2(r32:lhs, DEREF2(ADD4(r32:ptr, LSHIFT4(r32:rhs, CONSTANT():c))))
	{ StoreReg($lhs, "strh", $ptr, $rhs, $c.value as uint8); }

gen STORE4(r32:lhs, DEREF4(r32:rhs))
	{ StoreReg($lhs, "str", $rhs, 0, 0); }

gen STORE4(r32:lhs, DEREF4(ADDRESS(&sym is short):a))
	{ StoreAddress($lhs, "str", &$a.sym, $a.off); }

gen STORE4(r32:lhs, DEREF4(ADD4(r32:ptr, r32:rhs)))
	{ StoreReg($lhs, "str", $ptr, $rhs, 0); }

gen STORE4(r32:lhs, DEREF4(ADD4(r32:ptr, LSHIFT4(r32:rhs, CONSTANT():c))))
	{ StoreReg($lhs, "str", $ptr, $rhs, $c.value as uint8); }

%{
	sub LoadAddress(dest: RegId, insn: string, sym: [Symbol], off: Size) is
		var r := RegCacheFindValue(sym, off);
		if r != 0 then
			if r == dest then
				return;
			end if;
			E_insn("mov");
			E_reg(dest);
			E_comma();
			E_reg(r);
			E_nl();
		else
			E_insn(insn);
			E_reg(dest);
			E(", [r7, #");
			E_i16((sym.off + off) as int16);
			E("]\n");
		end if;
		R_flush(dest);
		RegCacheLeavesValue(dest, sym, off);
	end sub;
%}

gen r32 := DEREF1(r32:rhs)
{
	R_flush($$);
	E_insn("ldrb");
	E_reg($$);
	E(", [");
	E_reg($rhs);
	E("]\n");
}

gen r32 := DEREF1(ADDRESS(&sym is short):a)
{
	LoadAddress($$, "ldrb", &$a.sym, $a.off);
}

gen r32 := DEREF1(ADD4(r32:ptr, r32:rhs))
{
	R_flush($$);
	E_insn("ldrb");
	E_reg($$);
	E(", [");
	E_reg($ptr);
	E_comma();
	E_reg($rhs);
	E("]\n");
}

gen r32 := DEREF2(r32:rhs)
{
	R_flush($$);
	E_insn("ldrh");
	E_reg($$);
	E(", [");
	E_reg($rhs);
	E("]\n");
}

gen r32 := DEREF2(ADDRESS(&sym is short):a)
{
	LoadAddress($$, "ldrh", &$a.sym, $a.off);
}

gen r32 := DEREF2(ADD4(r32:ptr, r32:rhs))
{
	R_flush($$);
	E_insn("ldrh");
	E_reg($$);
	E(", [");
	E_reg($ptr);
	E_comma();
	E_reg($rhs);
	E("]\n");
}

gen r32 := DEREF2(ADD4(r32:ptr, LSHIFT4(r32:rhs, CONSTANT():c)))
{
	R_flush($$);
	E_insn("ldrh");
	E_reg($$);
	E(", [");
	E_reg($ptr);
	E_comma();
	E_reg($rhs);
	E(", lsl #");
	E_u8($c.value as uint8);
	E("]\n");
}

gen r32 := DEREF4(r32:rhs)
{
	R_flush($$);
	E_insn("ldr");
	E_reg($$);
	E(", [");
	E_reg($rhs);
	E("]\n");
}

gen r32 := DEREF4(ADDRESS(&sym is short):a)
{
	LoadAddress($$, "ldr", &$a.sym, $a.off);
}

gen r32 := DEREF4(ADD4(r32:ptr, r32:rhs))
{
	R_flush($$);
	E_insn("ldr");
	E_reg($$);
	E(", [");
	E_reg($ptr);
	E_comma();
	E_reg($rhs);
	E("]\n");
}

gen r32 := DEREF4(ADD4(r32:ptr, LSHIFT4(r32:rhs, CONSTANT():c)))
{
	R_flush($$);
	E_insn("ldr");
	E_reg($$);
	E(", [");
	E_reg($ptr);
	E_comma();
	E_reg($rhs);
	E(", lsl #");
	E_u8($c.value as uint8);
	E("]\n");
}

// --- Arithmetic -----------------------------------------------------------

%{
	sub Alu3(insn: string, dest: RegId, lhs: RegId, rhs: RegId, rhsop: [Operand]) is
		R_flush(dest);
		E_insn(insn);
		E_reg(dest);
		E_comma();
		E_reg(lhs);
		E_comma();
		E_op(rhs, rhsop);
		E_nl();
	end sub;
%}

gen r32 := ADD1(r32:lhs, r32|imm8:rhs) { Alu3("add", $$, $lhs, $rhs, &$@rhs.operand); }
gen r32 := ADD2(r32:lhs, r32|imm8:rhs) { Alu3("add", $$, $lhs, $rhs, &$@rhs.operand); }
gen r32 := ADD4(r32:lhs, r32|imm8:rhs) { Alu3("add", $$, $lhs, $rhs, &$@rhs.operand); }

gen r32 := SUB1(r32:lhs, r32|imm8:rhs) cost 1 { Alu3("sub", $$, $lhs, $rhs, &$@rhs.operand); }
gen r32 := SUB2(r32:lhs, r32|imm8:rhs) cost 1 { Alu3("sub", $$, $lhs, $rhs, &$@rhs.operand); }
gen r32 := SUB4(r32:lhs, r32|imm8:rhs) cost 1 { Alu3("sub", $$, $lhs, $rhs, &$@rhs.operand); }

gen r32 := MUL1(r32:lhs, r32:rhs) { Alu3("mul", $$, $lhs, $rhs, 0 as [Operand]); }
gen r32 := MUL2(r32:lhs, r32:rhs) { Alu3("mul", $$, $lhs, $rhs, 0 as [Operand]); }
gen r32 := MUL4(r32:lhs, r32:rhs) { Alu3("mul", $$, $lhs, $rhs, 0 as [Operand]); }

gen r32 := AND1(r32:lhs, r32:rhs) { Alu3("and", $$, $lhs, $rhs, 0 as [Operand]); }
gen r32 := AND2(r32:lhs, r32:rhs) { Alu3("and", $$, $lhs, $rhs, 0 as [Operand]); }
gen r32 := AND4(r32:lhs, r32:rhs) { Alu3("and", $$, $lhs, $rhs, 0 as [Operand]); }

gen r32 := EOR1(r32:lhs, r32:rhs) { Alu3("eor", $$, $lhs, $rhs, 0 as [Operand]); }
gen r32 := EOR2(r32:lhs, r32:rhs) { Alu3("eor", $$, $lhs, $rhs, 0 as [Operand]); }
gen r32 := EOR4(r32:lhs, r32:rhs) { Alu3("eor", $$, $lhs, $rhs, 0 as [Operand]); }

gen r32 := OR1(r32:lhs, r32:rhs) { Alu3("orr", $$, $lhs, $rhs, 0 as [Operand]); }
gen r32 := OR2(r32:lhs, r32:rhs) { Alu3("orr", $$, $lhs, $rhs, 0 as [Operand]); }
gen r32 := OR4(r32:lhs, r32:rhs) { Alu3("orr", $$, $lhs, $rhs, 0 as [Operand]); }

gen r32 := OR1(r32:lhs, NOT1(r32:rhs)) { Alu3("orn", $$, $lhs, $rhs, 0 as [Operand]); }
gen r32 := OR2(r32:lhs, NOT2(r32:rhs)) { Alu3("orn", $$, $lhs, $rhs, 0 as [Operand]); }
gen r32 := OR4(r32:lhs, NOT4(r32:rhs)) { Alu3("orn", $$, $lhs, $rhs, 0 as [Operand]); }

gen r32 := OR1(NOT1(r32:lhs), r32:rhs) { Alu3("orn", $$, $rhs, $lhs, 0 as [Operand]); }
gen r32 := OR2(NOT2(r32:lhs), r32:rhs) { Alu3("orn", $$, $rhs, $lhs, 0 as [Operand]); }
gen r32 := OR4(NOT4(r32:lhs), r32:rhs) { Alu3("orn", $$, $rhs, $lhs, 0 as [Operand]); }

gen r32 := LSHIFT1(r32:lhs, r32|imm8:rhs) { Alu3("lsl", $$, $lhs, $rhs, &$@rhs.operand); }
gen r32 := LSHIFT2(r32:lhs, r32|imm8:rhs) { Alu3("lsl", $$, $lhs, $rhs, &$@rhs.operand); }
gen r32 := LSHIFT4(r32:lhs, r32|imm8:rhs) { Alu3("lsl", $$, $lhs, $rhs, &$@rhs.operand); }

%{
	sub Div(insn: string, dest: RegId, lhs: RegId, rhs: RegId) is
		R_flush(dest);
		E_insn(insn);
		E_reg(dest);
		E_comma();
		E_reg(lhs);
		E_comma();
		E_reg(rhs);
		E_nl();
	end sub;

	sub Rem(insn: string, dest: RegId, lhs: RegId, rhs: RegId) is
		Div(insn, REG_R6, lhs, rhs);

		E_insn("mls");
		E_reg(dest);
		E_comma();
		E_reg(REG_R6);
		E_comma();
		E_reg(rhs);
		E_comma();
		E_reg(lhs);
		E_nl();
	end sub;

	sub Extend(insn: string, reg: RegId) is
		R_flush(reg);
		E_insn(insn);
		E_reg(reg);
		E_comma();
		E_reg(reg);
		E_nl();
	end sub;
%}

gen r32 := DIVU1(r32:lhs, r32:rhs) uses r6
{
	Extend("uxtb", $lhs);
	Extend("uxtb", $rhs);
	Div("udiv", $$, $lhs, $rhs);
}

gen r32 := DIVU2(r32:lhs, r32:rhs) uses r6
{
	Extend("uxth", $lhs);
	Extend("uxth", $rhs);
	Div("udiv", $$, $lhs, $rhs);
}

gen r32 := DIVU4(r32:lhs, r32:rhs) uses r6
{
	Div("udiv", $$, $lhs, $rhs);
}

gen r32 := DIVS1(r32:lhs, r32:rhs) uses r6
{
	Extend("sxtb", $lhs);
	Extend("sxtb", $rhs);
	Div("sdiv", $$, $lhs, $rhs);
}

gen r32 := DIVS2(r32:lhs, r32:rhs) uses r6
{
	Extend("sxth", $lhs);
	Extend("sxth", $rhs);
	Div("sdiv", $$, $lhs, $rhs);
}

gen r32 := DIVS4(r32:lhs, r32:rhs) uses r6
{
	Div("sdiv", $$, $lhs, $rhs);
}

gen r32 := REMU1(r32:lhs, r32:rhs) uses r6
{
	Extend("uxtb", $lhs);
	Extend("uxtb", $rhs);
	Rem("udiv", $$, $lhs, $rhs);
}

gen r32 := REMU2(r32:lhs, r32:rhs) uses r6
{
	Extend("uxth", $lhs);
	Extend("uxth", $rhs);
	Rem("udiv", $$, $lhs, $rhs);
}

gen r32 := REMU4(r32:lhs, r32:rhs) uses r6
{
	Rem("udiv", $$, $lhs, $rhs);
}

gen r32 := REMS1(r32:lhs, r32:rhs) uses r6
{
	Extend("sxtb", $lhs);
	Extend("sxtb", $rhs);
	Rem("sdiv", $$, $lhs, $rhs);
}

gen r32 := REMS2(r32:lhs, r32:rhs) uses r6
{
	Extend("sxth", $lhs);
	Extend("sxth", $rhs);
	Rem("sdiv", $$, $lhs, $rhs);
}

gen r32 := REMS4(r32:lhs, r32:rhs) uses r6
{
	Rem("sdiv", $$, $lhs, $rhs);
}

%{
	sub RShift(extend: string, shift: string, dest: RegId, rhs: RegId, rhsop: [Operand]) is
		R_flush(dest);
		if extend != (0 as string) then
			E_insn(extend);
			E_reg(dest);
			E_comma();
			E_reg(dest);
			E_nl();
		end if;

		E_insn(shift);
		E_reg(dest);
		E_comma();
		E_op(rhs, rhsop);
		E_nl();
	end sub;
%}

gen r32 := RSHIFTU1($$, r32|imm5:rhs) { RShift("uxtb", "lsr", $$, $rhs, &$@rhs.operand); }
gen r32 := RSHIFTU2($$, r32|imm5:rhs) { RShift("uxth", "lsr", $$, $rhs, &$@rhs.operand); }
gen r32 := RSHIFTU4($$, r32|imm5:rhs) { RShift(0 as string, "lsr", $$, $rhs, &$@rhs.operand); }

gen r32 := RSHIFTS1($$, r32|imm5:rhs) { RShift("sxtb", "lsr", $$, $rhs, &$@rhs.operand); }
gen r32 := RSHIFTS2($$, r32|imm5:rhs) { RShift("sxth", "lsr", $$, $rhs, &$@rhs.operand); }
gen r32 := RSHIFTS4($$, r32|imm5:rhs) { RShift(0 as string, "asr", $$, $rhs, &$@rhs.operand); }

%{
	sub Not(dest: RegId, lhs: RegId) is
		R_flush(dest);
		E_insn("mvn");
		E_reg(dest);
		E_comma();
		E_reg(lhs);
		E_nl();
	end sub;

	sub Neg(dest: RegId, lhs: RegId) is
		R_flush(dest);
		E_insn("rsb");
		E_reg(dest);
		E_comma();
		E_reg(lhs);
		E(", #0\n");
	end sub;
%}

gen r32 := NOT1(r32:lhs) { Not($$, $lhs); }
gen r32 := NOT2(r32:lhs) { Not($$, $lhs); }
gen r32 := NOT4(r32:lhs) { Not($$, $lhs); }

gen r32 := NEG1(r32:lhs) { Neg($$, $lhs); }
gen r32 := NEG2(r32:lhs) { Neg($$, $lhs); }
gen r32 := NEG4(r32:lhs) { Neg($$, $lhs); }

// --- Conditionals ---------------------------------------------------------

gen BEQ0(CONSTANT():lhs, CONSTANT():rhs):b uses all
{
    var label := $b.falselabel;
    if $lhs.value == $rhs.value then
        label := $b.truelabel;
    end if;
    if label != $b.fallthrough then
        E_b(label);
    end if;
}

%{
	sub Cmp2(lhs: RegId, rhs: RegId, rhsop: [Operand]) is
		E_insn("cmp");
		E_reg(lhs);
		E_comma();
		E_op(rhs, rhsop);
		E_nl();
	end sub;

	sub CmpJumps(trueinsn: string, falseinsn: string, node: [Node]) is
		if node.beq.truelabel != node.beq.fallthrough then
			E_jump(trueinsn, node.beq.truelabel);
		end if;
		if node.beq.falselabel != node.beq.fallthrough then
			E_jump(falseinsn, node.beq.falselabel);
		end if;
	end sub;
%}

gen BEQ4(r32:lhs, r32|imm8:rhs):b uses all
{
	Cmp2($lhs, $rhs, &$@rhs.operand);
	CmpJumps("beq", "bne", $@$);
}

gen BLTU4(r32:lhs, r32|imm8:rhs):b uses all
{
	Cmp2($lhs, $rhs, &$@rhs.operand);
	CmpJumps("blo", "bhs", $@$);
}

gen BLTS4(r32:lhs, r32|imm8:rhs):b uses all
{
	Cmp2($lhs, $rhs, &$@rhs.operand);
	CmpJumps("blt", "bge", $@$);
}

gen BEQ4(r32:lhs, r32|imm8:rhs):b uses all
{
	Cmp2($lhs, $rhs, &$@rhs.operand);
	CmpJumps("beq", "bne", $@$);
}

gen BEQ2(r32:lhs, r32:rhs):b uses all
{
	Extend("uxth", $lhs);
	if ($rhs & REGCLASS_R32) != 0 then
		Extend("uxth", $rhs);
	end if;
	Cmp2($lhs, $rhs, &$@rhs.operand);
	CmpJumps("beq", "bne", $@$);
}

gen BLTU2(r32:lhs, r32|imm8:rhs):b uses all
{
	Extend("uxth", $lhs);
	if ($rhs & REGCLASS_R32) != 0 then
		Extend("uxth", $rhs);
	end if;
	Cmp2($lhs, $rhs, &$@rhs.operand);
	CmpJumps("blo", "bhs", $@$);
}

gen BLTS2(r32:lhs, r32|imm8:rhs):b uses all
{
	Extend("sxth", $lhs);
	if ($rhs & REGCLASS_R32) != 0 then
		Extend("sxth", $rhs);
	end if;
	Cmp2($lhs, $rhs, &$@rhs.operand);
	CmpJumps("blt", "bge", $@$);
}

gen BEQ1(r32:lhs, r32:rhs):b uses all
{
	Extend("uxtb", $lhs);
	Extend("uxtb", $rhs);
	Cmp2($lhs, $rhs, &$@rhs.operand);
	CmpJumps("beq", "bne", $@$);
}

gen BLTU1(r32:lhs, r32|imm8:rhs):b uses all
{
	Extend("uxtb", $lhs);
	if ($rhs & REGCLASS_R32) != 0 then
		Extend("uxtb", $rhs);
	end if;
	Cmp2($lhs, $rhs, &$@rhs.operand);
	CmpJumps("blo", "bhs", $@$);
}

gen BLTS1(r32:lhs, r32|imm8:rhs):b uses all
{
	Extend("sxtb", $lhs);
	if ($rhs & REGCLASS_R32) != 0 then
		Extend("sxtb", $rhs);
	end if;
	Cmp2($lhs, $rhs, &$@rhs.operand);
	CmpJumps("blt", "bge", $@$);
}

// --- Case -----------------------------------------------------------------

gen STARTCASE1(r32:lhs) uses all { E_insn("uxtb"); E_reg(REG_R0); E_comma(); E_reg($lhs); E_nl(); }
gen STARTCASE2(r32:lhs) uses all { E_insn("uxth"); E_reg(REG_R0); E_comma(); E_reg($lhs); E_nl(); }
gen STARTCASE4(r0) uses all;

%{
	sub WhenCase(c: [MidcodeWhencase], value: uint32) is
		R_flushall();
		if value < 256 then
			E_insn("cmp");
			E_reg(REG_R0);
			E(", #");
			E_u32(value);
			E_nl();
		else
			E_insn("mov r1, #");
			E_u16(value as uint16);
			E_nl();

			value := value >> 16;
			if value != 0 then
				E_insn("movt r1, #");
				E_u16(value as uint16);
				E_nl();
			end if;

			E("\tcmp r0, r1\n");
		end if;
		E_jump("bne", c.falselabel);
	end sub;
%}

gen WHENCASE1():c uses all { WhenCase(&$c, ($c.value & 0xff) as uint32); }
gen WHENCASE2():c uses all { WhenCase(&$c, ($c.value & 0xffff) as uint32); }
gen WHENCASE4():c uses all { WhenCase(&$c, $c.value as uint32); }

gen ENDCASE1() { R_flushall(); };
gen ENDCASE2() { R_flushall(); };
gen ENDCASE4() { R_flushall(); };

// --- Casts ----------------------------------------------------------------

gen r32 := CAST21($$:lhs);
gen r32 := CAST41($$:lhs);
gen r32 := CAST42($$:lhs);

gen r32 := CAST12(r32:lhs):c
{
	R_flush($$);
	if $c.sext != 0 then
		E_insn("sxtb");
	else
		E_insn("uxtb");
	end if;
	E_reg($$);
	E_comma();
	E_reg($lhs);
	E_nl();
}

gen r32 := CAST14(r32:lhs):c
{
	R_flush($$);
	if $c.sext != 0 then
		E_insn("sxtb");
	else
		E_insn("uxtb");
	end if;
	E_reg($$);
	E_comma();
	E_reg($lhs);
	E_nl();
}

gen r32 := CAST24(r32:lhs):c
{
	R_flush($$);
	if $c.sext != 0 then
		E_insn("sxth");
	else
		E_insn("uxth");
	end if;
	E_reg($$);
	E_comma();
	E_reg($lhs);
	E_nl();
}

// --- Initialisers ---------------------------------------------------------

gen STARTINIT():s
{
	EmitterOpenStream(current_subr);
	E(".data 4\n");
	E_symref(&$s.sym, 0);
	E(":\n");
}

gen ENDINIT()
{
	EmitterCloseStream();
}

gen INIT1():c
{
	E("\t.byte ");
	E_u8($c.value as uint8);
	E_nl();
}

gen INIT2():c
{
	E("\t.short ");
	E_u16($c.value as uint16);
	E_nl();
}

gen INIT4():c
{
	E("\t.long ");
	E_u32($c.value as uint32);
	E_nl();
}

gen INITADDRESS():a
{
	E("\t.long ");
    E_symref(&$a.sym, $a.off);
    E_nl();
}

gen INITSUBREF():a
{
	E("\t.long ");
    E_subref($a.subr);
    E_nl();
}

gen INITSTRING():s
{
	E("\t.long ");
	var lid := E_string($s.text);
	E_labelref(lid);
    E_nl();
}

// --- Strings --------------------------------------------------------------

%{
    sub E_string(data: string): (lid: uint16) is
        lid := AllocPLabel();

        EmitterOpenStream(current_subr);

		E(".data 1\n");
        E_label(lid);
		E_insn(".byte");

        loop
            var c := [data];
            if c == 0 then
                break;
            end if;
            data := data + 1;
            
            E_u8(c);
            E_comma();
        end loop;
        E("0\n");
        EmitterCloseStream();
    end sub;
%}

gen r32 := STRING():s
{
	var lid := E_string($s.text);
	R_flush($$);
	E_insn("ldr");
	E_reg($$);
	E(", =");
	E_labelref(lid);
	E_nl();
}

// --- Inline assembly ------------------------------------------------------

gen ASMGROUPSTART() uses all;
gen ASMGROUPEND();

gen ASMSTART()
{
	E_tab();
}

gen ASMTEXT():t
{
	E($t.text);
	E_space();
}

gen ASMSYMBOL():s
{
	E_symref(&$s.sym, 0);
    E_space();
}

gen ASMSUBREF():s
{
	E_subref($s.subr);
    E_space();
}

gen ASMVALUE():c
{
	E_b8('(');
	E_i32($c.value);
	E_b8(')');
}

gen ASMEND()
{
    E_nl();
}




