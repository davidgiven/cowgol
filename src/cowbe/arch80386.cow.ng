%{
	sub ArchAlignUp(value: Size, alignment: uint8): (newvalue: Size) is
		newvalue := value;
	end sub;

	sub E_symref(sym: [Symbol], off: Size) is
		if sym.wsid == WSID_STATIC then
			E_wsref(sym.subr.id, sym.wsid, sym.off);
			if off != 0 then
				E_i16(off as int16);
			end if;
		else
			E_wsref(sym.subr.id, sym.wsid, sym.off + off);
		end if;
	end sub;

	sub R_flushall() is
		RegCacheFlush(ALL_REGS);
	end sub;

	sub R_flush(reg: RegId) is
		RegCacheFlush(FindConflictingRegisters(reg));
	end sub;

	sub E_label(label: LabelRef) is
		R_flushall();
		E_labelref(label);
		E(":\n");
	end sub;

	sub getreg(reg: RegId, regtable: [RegId], name: string): (result: RegId) is
		result := 0;
		while reg != 0 loop
			if (reg & 1) != 0 then
				result := [regtable];
				return;
			end if;
			reg := reg >> 1;
			regtable := @next regtable;
		end loop;

		if result == 0 then
			StartError();
			print("bad ");
			print(name);
			print_char(' ');
			print_hex_i32(reg);
			EndError();
		end if;
	end sub;

	sub loreg(reg: RegId): (loreg: RegId) is
		var regs: RegId[] := {
			REG_AL, REG_BL, REG_CL, REG_DL, 0, 0,
			REG_AL, REG_BL, REG_CL, REG_DL, 0, 0,
			REG_AL, REG_AL,
			REG_BL, REG_BL,
			REG_CL, REG_CL,
			REG_DL, REG_DL
		};

		loreg := getreg(reg, &regs[0], "loreg");
	end sub;

	sub wordreg(reg: RegId): (wordreg: RegId) is
		var regs: RegId[] := {
			REG_AX, REG_BX, REG_CX, REG_DX, REG_SI, REG_DI,
			REG_AX, REG_BX, REG_CX, REG_DX, REG_SI, REG_DI,
			REG_AX, REG_AX,
			REG_BX, REG_BX,
			REG_CX, REG_CX,
			REG_DX, REG_DX
		};

		wordreg := getreg(reg, &regs[0], "wordreg");
	end sub;

	sub E_reg(reg: RegId) is
		var names: string[] := {
			"eax", "ebx", "ecx", "edx", "esi", "edi",
			"ax",  "bx",  "cx",  "dx",  "si",  "di",
			"al", "ah", "bl", "bh", "cl", "ch", "dl", "dh"
		};

		E_b8('%');
		var p := &names[0];
		while reg != 0 loop
			if (reg & 1) != 0 then
				E([p]);
				return;
			end if;
			reg := reg >> 1;
			p := @next p;
		end loop;

		StartError();
		print("bad reg ");
		print_hex_i32(reg);
		EndError();
	end sub;

	sub E_push(reg: RegId) is
		if (reg & REGCLASS_R8) != 0 then
			reg := wordreg(reg);
		end if;
		if (reg & REGCLASS_R16) != 0 then
			E("\tpushw ");
		else
			E("\tpushl ");
		end if;
		E_reg(reg);
		E_nl();
	end sub;

	sub E_pop(reg: RegId) is
		R_flush(reg);
		if (reg & REGCLASS_R8) != 0 then
			reg := wordreg(reg);
		end if;
		if (reg & REGCLASS_R16) != 0 then
			E("\tpopw ");
		else
			E("\tpopl ");
		end if;
		E_reg(reg);
		E_nl();
	end sub;

	sub E_loadconst(reg: RegId, value: Arith) is
		var cache := RegCacheFindConstant(value as Word) & reg;
		if cache != 0 then
			# The value is already in the desired register.
			return;
		end if;

		R_flush(reg);
		if (reg & REGCLASS_RH8) != 0 then
			value := value & 0xff;
			E("\tmovb ");
		elseif (reg & REGCLASS_R16) != 0 then
			value := value & 0xffff;
			E("\tmovw ");
		else
			E("\tmovl ");
		end if;
		E("$");
		E_i32(value);
		E_comma();
		E_reg(reg);
		E_nl();
		RegCacheLeavesConstant(reg, value as Word);
	end sub;
			
	sub E_loadaddr(reg: RegId, sym: [Symbol], off: Size) is
		var cache := RegCacheFindAddress(sym, off) & reg;
		if cache != 0 then
			# The value is already in the desired register.
			return;
		end if;

		R_flush(reg);
		E("\tlea ");
		E_symref(sym, off);
		E_comma();
		E_reg(reg);
		E_nl();
		RegCacheLeavesAddress(reg, sym, off);
	end sub;
			
	sub E_loadsubref(reg: RegId, subr: [Subroutine]) is
		R_flush(reg);
		E("\tlea ");
		E_subref(subr);
		E_comma();
		E_reg(reg);
		E_nl();
	end sub;
			
	sub E_mov(reg: RegId) is
		if (reg & REGCLASS_RH8) != 0 then
			E("\tmovb ");
		elseif (reg & REGCLASS_R16) != 0 then
			E("\tmovw ");
		else
			E("\tmovl ");
		end if;
	end sub;

	sub E_move(src: RegId, dest: RegId) is
		R_flush(dest);
		E_mov(src);
		E_reg(src);
		E_comma();
		E_reg(dest);
		E_nl();
	end sub;

	sub E_load(reg: RegId, sym: [Symbol], off: Size, index: RegId) is
		var cache := RegCacheFindValue(sym, off) & reg;
		if cache != 0 then
			# The value is already in the desired register.
			return;
		end if;

		R_flush(reg);
		E_mov(reg);
		E("(");
		E_symref(sym, off);
		if index != 0 then
			E_comma();
			E_reg(index);
		end if;
		E("), ");
		E_reg(reg);
		E_nl();
		RegCacheLeavesValue(reg, sym, off);
	end sub;

	sub E_store(reg: RegId, sym: [Symbol], off: Size, index: RegId) is
		E_mov(reg);
		E_reg(reg);
		E(", (");
		E_symref(sym, off);
		if index != 0 then
			E_comma();
			E_reg(index);
		end if;
		E(")\n");
		RegCacheLeavesValue(reg, sym, off);
	end sub;

	sub E_loadix(reg: RegId, ptr: RegId, index: RegId, off: Arith) is
		R_flush(reg);
		E_mov(reg);
		if off != 0 then
			E_b8('0');
			E_i32(off);
		end if;
		E_b8('(');
		E_reg(ptr);
		if index != 0 then
			E_comma();
			E_reg(index);
		end if;
		E("), ");
		E_reg(reg);
		E_nl();
	end sub;

	sub E_storeix(reg: RegId, ptr: RegId, index: RegId, off: Arith) is
		E_mov(reg);
		E_reg(reg);
		E_comma();
		if off != 0 then
			E_b8('0');
			E_i32(off);
		end if;
		E_b8('(');
		E_reg(ptr);
		if index != 0 then
			E_comma();
			E_reg(index);
		end if;
		E(")\n");
	end sub;

	sub E_jump(insn: string, label: LabelRef) is
		R_flushall();
		E_tab();
		E(insn);
		E_space();
		E_labelref(label);
		E_nl();
	end sub;

	sub E_jmp(label: LabelRef) is
		E_jump("jmp", label);
	end sub;

	sub E_jne(label: LabelRef) is
		E_jump("jne", label);
	end sub;

	sub E_call(subr: [Subroutine]) is
		R_flushall();
		E_tab();
		E("call ");
		E_subref(subr);
		E_nl();
	end sub;

	sub E_callebx() is
		R_flushall();
		E_tab();
		E("call *%ebx");
		E_nl();
	end sub;

	sub E_tailcall(subr: [Subroutine]) is
		E_push(REG_EDX);
		R_flushall();
		E_tab();
		E("jmp ");
		E_subref(subr);
		E_nl();
	end sub;

	sub E_tailcallebx() is
		E_push(REG_EDX);
		R_flushall();
		E_tab();
		E("jmp *%ebx");
		E_nl();
	end sub;

	sub E_ret() is
		E("\tret\n");
	end sub;

	sub E_cbw() is
		E("\tcbw\n");
	end sub;

	sub E_cwd() is
		E("\tcwd\n");
	end sub;

	sub E_cdq() is
		E("\tcdq\n");
	end sub;

	sub E_insn(insn: string, reg: RegId) is
		E_tab();
		E(insn);
		if (reg & REGCLASS_RH8) != 0 then
			E_b8('b');
		elseif (reg & REGCLASS_R16) != 0 then
			E_b8('w');
		else
			E_b8('l');
		end if;
		E_space();
	end sub;

	sub E_alu1(insn: string, reg: RegId) is
		R_flush(reg);
		E_insn(insn, reg);
		E_reg(reg);
		E_nl();
	end sub;

	sub E_neg(reg: RegId) is
		E_alu1("neg", reg);
	end sub;

	sub E_not(reg: RegId) is
		E_alu1("not", reg);
	end sub;

	sub E_inc(reg: RegId) is
		E_alu1("inc", reg);
	end sub;

	sub E_dec(reg: RegId) is
		E_alu1("dec", reg);
	end sub;

	sub E_shift(insn: string, reg: RegId) is
		R_flush(reg);
		E_insn(insn, reg);
		E("%cl, ");
		E_reg(reg);
		E_nl();
	end sub;

	sub E_shl(reg: RegId) is
		E_shift("shl", reg);
	end sub;

	sub E_shr(reg: RegId) is
		E_shift("shr", reg);
	end sub;

	sub E_sar(reg: RegId) is
		E_shift("sar", reg);
	end sub;

	sub E_shifti(insn: string, value: Arith, reg: RegId) is
		R_flush(reg);
		E_insn(insn, reg);
		E_b8('$');
		E_i32(value);
		E_comma();
		E_reg(reg);
		E_nl();
	end sub;

	sub E_shli(value: Arith, reg: RegId) is
		E_shifti("shl", value, reg);
	end sub;

	sub E_sari(value: Arith, reg: RegId) is
		E_shifti("sar", value, reg);
	end sub;

	sub E_shri(value: Arith, reg: RegId) is
		E_shifti("shr", value, reg);
	end sub;

	sub E_alu2_noflush(insn: string, src: RegId, dest: RegId) is
		E_insn(insn, src);
		E_reg(src);
		E_comma();
		E_reg(dest);
		E_nl();
	end sub;

	sub E_cmp(src: RegId, dest: RegId) is
		E_alu2_noflush("cmp", src, dest);
	end sub;

	sub E_alu2(insn: string, src: RegId, dest: RegId) is
		R_flush(dest);
		E_alu2_noflush(insn, src, dest);
	end sub;

	sub E_xor(src: RegId, dest: RegId) is
		E_alu2("xor", src, dest);
		if src == dest then
			RegCacheLeavesConstant(dest, 0);
		end if;
	end sub;

	sub E_add(src: RegId, dest: RegId) is
		E_alu2("add", src, dest);
	end sub;

	sub E_sub(src: RegId, dest: RegId) is
		E_alu2("sub", src, dest);
	end sub;

	sub E_and(src: RegId, dest: RegId) is
		E_alu2("and", src, dest);
	end sub;

	sub E_or(src: RegId, dest: RegId) is
		E_alu2("or", src, dest);
	end sub;

	sub E_alu2i_noflush(insn: string, value: Arith, dest: RegId) is
		E_insn(insn, dest);
		E_b8('$');
		E_i32(value);
		E_comma();
		E_reg(dest);
		E_nl();
	end sub;

	sub E_alu2i(insn: string, value: Arith, dest: RegId) is
		R_flush(dest);
		E_alu2i_noflush(insn, value, dest);
	end sub;

	sub E_cmpi(value: Arith, dest: RegId) is
		E_alu2i_noflush("cmp", value, dest);
	end sub;

	sub E_addi(value: Arith, dest: RegId) is
		case value is
			when 1: E_inc(dest);
			when -1: E_dec(dest);
			when else: E_alu2i("add", value, dest);
		end case;
	end sub;

	sub E_subi(value: Arith, dest: RegId) is
		case value is
			when 1: E_dec(dest);
			when -1: E_inc(dest);
			when else: E_alu2i("sub", value, dest);
		end case;
	end sub;

	sub E_andi(value: Arith, dest: RegId) is
		E_alu2i("and", value, dest);
	end sub;

	sub E_ori(value: Arith, dest: RegId) is
		E_alu2i("or", value, dest);
	end sub;

	sub E_xori(value: Arith, dest: RegId) is
		E_alu2i("xor", value, dest);
	end sub;

	sub E_imul(dest: RegId) is
		if (dest & REGCLASS_R8) != 0 then
			R_flush(REG_AX);
		elseif (dest & REGCLASS_R16) != 0 then
			R_flush(REG_DX|REG_AX);
		else
			R_flush(REG_EDX|REG_EAX);
		end if;
		E("\timul ");
		E_reg(dest);
		E_nl();
	end sub;

	sub E_div(src: RegId) is
		if (src & REGCLASS_R8) != 0 then
			R_flush(REG_AX);
		elseif (src & REGCLASS_R16) != 0 then
			R_flush(REG_DX|REG_AX);
		else
			R_flush(REG_EDX|REG_EAX);
		end if;
		R_flush(src);
		E_insn("div", src);
		E_reg(src);
		E_nl();
	end sub;

	sub E_idiv(src: RegId) is
		if (src & REGCLASS_R8) != 0 then
			R_flush(REG_AX);
		elseif (src & REGCLASS_R16) != 0 then
			R_flush(REG_DX|REG_AX);
		else
			R_flush(REG_EDX|REG_EAX);
		end if;
		R_flush(src);
		E_insn("idiv", src);
		E_reg(src);
		E_nl();
	end sub;

	sub E_ext(src: RegId, dest: RegId, sext: uint8) is
		E_tab();
		E("mov");
		if sext != 0 then
			E_b8('s');
		else
			E_b8('z');
		end if;
		E("x ");
		E_reg(src);
		E_comma();
		E_reg(dest);
		E_nl();
	end sub;

	var stringid: uint16 := 0;
	sub E_string(data: string) is
		var sid := stringid;
		stringid := stringid + 1;

		EmitterOpenStream(current_subr);

		E("\t.text 1\n");
		E_b8(COO_ESCAPE_THISCOO);
		E_b8('c');
		E_u16(sid);
		E(":\n\t.byte ");

		loop
			var c := [data];
			if c == 0 then
				break;
			end if;
			data := data + 1;
			
			E_u8(c);
			E_comma();
		end loop;
		E("0\n");
		EmitterCloseStream();

		E_b8(COO_ESCAPE_THISCOO);
		E_b8('c');
		E_u16(sid);
	end sub;

    sub ArchBeginComment() is
        E("\t# ");
    end sub;

    sub ArchEndComment() is
        E_nl();
    end sub;

	sub ArchEmitMove(src: RegId, dest: RegId) is
		if src == 0 then
			E_pop(dest);
		elseif dest == 0 then
			E_push(src);
		else
			E_move(src, dest);
		end if;
	end sub;

	sub ArchEndInstruction() is
	end sub;

	sub ArchEndGroup() is
	end sub;
%}

wordsize uint32;

register eax ebx ecx edx esi edi;
register  ax  bx  cx  dx  si  di;
register al ah bl bh cl ch dl dh;
register stk4 param;

regclass r8 := al|bl|cl|dl;
regclass rh8 := r8|ah|bh|ch|dh;
regclass r16b := ax|bx|cx|dx; // 16-bit registers with byte access
regclass r16 := r16b|si|di;
regclass r32b := eax|ebx|ecx|edx; // 32-bit registers with byte access
regclass r32 := r32b|esi|edi;
regclass rix := ebx|esi|edi;

regdata eax compatible r32 uses eax|ax|ah|al;
regdata ebx compatible r32 uses ebx|bx|bh|bl;
regdata ecx compatible r32 uses ecx|cx|ch|cl;
regdata edx compatible r32 uses edx|dx|dh|dl;
regdata esi compatible r32 uses esi|si;
regdata edi compatible r32 uses edi|di;
regdata ax compatible r16  uses eax|ax|ah|al;
regdata bx compatible r16  uses ebx|bx|bh|bl;
regdata cx compatible r16  uses ecx|cx|ch|cl;
regdata dx compatible r16  uses edx|dx|dh|dl;
regdata si compatible r16  uses esi|si;
regdata di compatible r16  uses edi|di;
regdata al compatible r8   uses eax|ax|ah|al;
regdata bl compatible r8   uses ebx|bx|bh|bl;
regdata cl compatible r8   uses ecx|cx|ch|cl;
regdata dl compatible r8   uses edx|dx|dh|dl;
regdata stk4 stacked;
regdata param stacked;

// --- Core things ----------------------------------------------------------

gen STARTFILE();
gen ENDFILE();

gen LABEL():b uses all
{
	E_label($b.label);
}

gen JUMP():j uses all
{
	E_jmp($j.label);
}

// --- Subroutines ----------------------------------------------------------

gen STARTSUB() uses all
{
	RegCacheReset();

	EmitterOpenStream(current_subr);

	E("\n\n\t# ");
	E(current_subr.name);
	E(" workspace at ");
	E_b8(COO_ESCAPE_WSREF);
	E_b16(current_subr.id);
	E_b8(0);
	E_b16(0);
	E(" length ");
	E_b8(COO_ESCAPE_WSSIZE);
	E_b16(current_subr.id);
	E_b8(0);
	E_nl();

	E("\t.text\n");
	E_b8(COO_ESCAPE_THISSUB);
	E(":\n");

	var count := current_subr.num_input_parameters;
	var lastparam := count - 1;
	var popped: uint8 := 0;

	sub pop_return_address() is
		if popped == 0 then
			E_pop(REG_EDX);
			popped := 1;
		end if;
	end sub;

	while count != 0 loop
		count := count - 1;
		var param := GetInputParameter(current_subr, count);

		var reg: RegId;
		case param.width is
			when 1: reg := REG_AL;
			when 2: reg := REG_AX;
			when 4: reg := REG_EAX;
		end case;

		if count != lastparam then
			pop_return_address();
			E_pop(reg);
		end if;
		E_store(reg, param as [Symbol], 0, 0);
	end loop;

	if popped != 0 then
		E_push(REG_EDX);
	end if;
}

gen ENDSUB() uses all
{
	R_flushall();

	E("end_");
	E_subref(current_subr);
	E(":\n");

	var count: uint8 := 0;
	var params := current_subr.num_output_parameters;
	var pushed: uint8 := 0;

	sub push_return_address() is
		if pushed == 0 then
			E_pop(REG_EDX);
			pushed := 1;
		end if;
	end sub;

	while count != params loop
		var param := GetOutputParameter(current_subr, count);

		var reg: RegId;
		case param.width is
			when 1: reg := REG_AL;
			when 2: reg := REG_AX;
			when 4: reg := REG_EAX;
		end case;
		E_load(reg, param as [Symbol], 0, 0);
		if count != (params-1) then
			push_return_address();
			E_push(reg);
		end if;

		count := count + 1;
	end loop;

	if pushed != 0 then
		E("\tjmp *%edx\n");
	else
		E_ret();
	end if;

	EmitterCloseStream();
}

gen RETURN() uses all
{
	if current_subr.num_output_parameters == 0 then
		E_ret();
	else
		E("\tjmp end_");
		E_subref(current_subr);
		E_nl();
	end if;
}

%{
	sub Call(addr: [MidcodeSubref]) is
		E_call(addr.subr);
	end sub;

	sub Tailcall(addr: [MidcodeSubref]) is
		E_tailcall(addr.subr);
	end sub;
%}

gen        CALL(       param,       SUBREF():a) uses all { Call(&$a); }
gen        CALL(  ARG1(param, al),  SUBREF():a) uses all { Call(&$a); }
gen        CALL(  ARG2(param, ax),  SUBREF():a) uses all { Call(&$a); }
gen        CALL(  ARG4(param, eax), SUBREF():a) uses all { Call(&$a); }

gen        CALL(       param,       ebx) uses all { E_callebx(); }
gen        CALL(  ARG1(param, al),  ebx) uses all { E_callebx(); }
gen        CALL(  ARG2(param, ax),  ebx) uses all { E_callebx(); }
gen        CALL(  ARG4(param, eax), ebx) uses all { E_callebx(); }

gen    TAILCALL(       param,       SUBREF():a) uses all { Tailcall(&$a); }
gen    TAILCALL(  ARG1(param, al),  SUBREF():a) uses all { Tailcall(&$a); }
gen    TAILCALL(  ARG2(param, ax),  SUBREF():a) uses all { Tailcall(&$a); }
gen    TAILCALL(  ARG4(param, eax), SUBREF():a) uses all { Tailcall(&$a); }

gen    TAILCALL(       param,       ebx) uses all { E_tailcallebx(); }
gen    TAILCALL(  ARG1(param, al),  ebx) uses all { E_tailcallebx(); }
gen    TAILCALL(  ARG2(param, ax),  ebx) uses all { E_tailcallebx(); }
gen    TAILCALL(  ARG4(param, eax), ebx) uses all { E_tailcallebx(); }

gen PREPARETAIL() {E_pop(REG_EDX);}

gen param := END();

gen param := ARG1(param, r8:lhs)  { E_push($lhs); }
gen param := ARG2(param, r16:lhs) { E_push($lhs); }
gen param := ARG4(param, r32:lhs) { E_push($lhs); }

gen al  := POPARG1(remaining==0);
gen ax  := POPARG2(remaining==0);
gen eax := POPARG4(remaining==0);

gen r8  := POPARG1(remaining!=0) { E_pop($$); }
gen r16 := POPARG2(remaining!=0) { E_pop($$); }
gen r32 := POPARG4(remaining!=0) { E_pop($$); }

// --- Constants ------------------------------------------------------------

gen r8|r16|r32 := CONSTANT():c
{
	if $c.value == 0 then
		E_xor($$, $$);
	else
		E_loadconst($$, $c.value);
	end if;
}

gen r32 := ADDRESS():a
{
	E_loadaddr($$, &$a.sym, $a.off);
}

gen r32 := SUBREF():a
{
	E_loadsubref($$, $a.subr);
}

// --- Loads ---------------------------------------------------------------

gen r8 := DEREF1(r32:rhs)     { E_loadix($$, $rhs, 0, 0); }
gen r16 := DEREF2(r32:rhs)    { E_loadix($$, $rhs, 0, 0); }
gen r32 := DEREF4(r32:rhs)    { E_loadix($$, $rhs, 0, 0); }

gen r8 := DEREF1(ADD4(r32:rhs, r32:idx))  { E_loadix($$, $rhs, $idx, 0); }
gen r16 := DEREF2(ADD4(r32:rhs, r32:idx)) { E_loadix($$, $rhs, $idx, 0); }
gen r32 := DEREF4(ADD4(r32:rhs, r32:idx)) { E_loadix($$, $rhs, $idx, 0); }

gen r8 := DEREF1(ADD4(r32:rhs, CONSTANT():c))  { E_loadix($$, $rhs, 0, $c.value); }
gen r16 := DEREF2(ADD4(r32:rhs, CONSTANT():c)) { E_loadix($$, $rhs, 0, $c.value); }
gen r32 := DEREF4(ADD4(r32:rhs, CONSTANT():c)) { E_loadix($$, $rhs, 0, $c.value); }

gen r8 := DEREF1(ADDRESS():a)  { E_load($$, &$a.sym, $a.off, 0); }
gen r16 := DEREF2(ADDRESS():a) { E_load($$, &$a.sym, $a.off, 0); }
gen r32 := DEREF4(ADDRESS():a) { E_load($$, &$a.sym, $a.off, 0); }

// --- Stores ---------------------------------------------------------------

gen STORE1(r8:lhs, DEREF1(r32:rhs))  { E_storeix($lhs, $rhs, 0, 0); }
gen STORE2(r16:lhs, DEREF2(r32:rhs)) { E_storeix($lhs, $rhs, 0, 0); }
gen STORE4(r32:lhs, DEREF4(r32:rhs)) { E_storeix($lhs, $rhs, 0, 0); }

gen STORE1(r8:lhs, DEREF1(ADD4(r32:rhs, r32:idx)))  { E_storeix($lhs, $rhs, $idx, 0); }
gen STORE2(r16:lhs, DEREF2(ADD4(r32:rhs, r32:idx))) { E_storeix($lhs, $rhs, $idx, 0); }
gen STORE4(r32:lhs, DEREF4(ADD4(r32:rhs, r32:idx))) { E_storeix($lhs, $rhs, $idx, 0); }

gen STORE1(r8:lhs, DEREF1(ADD4(r32:rhs, CONSTANT():c)))  { E_storeix($lhs, $rhs, 0, $c.value); }
gen STORE2(r16:lhs, DEREF2(ADD4(r32:rhs, CONSTANT():c))) { E_storeix($lhs, $rhs, 0, $c.value); }
gen STORE4(r32:lhs, DEREF4(ADD4(r32:rhs, CONSTANT():c))) { E_storeix($lhs, $rhs, 0, $c.value); }

gen STORE1(r8:lhs, DEREF1(ADDRESS():a))  { E_store($lhs, &$a.sym, $a.off, 0); }
gen STORE2(r16:lhs, DEREF2(ADDRESS():a)) { E_store($lhs, &$a.sym, $a.off, 0); }
gen STORE4(r32:lhs, DEREF4(ADDRESS():a)) { E_store($lhs, &$a.sym, $a.off, 0); }

// --- Maths ----------------------------------------------------------------

gen r8  := NEG1($$)                   { E_neg($$); }
gen r16 := NEG2($$)                   { E_neg($$); }
gen r32 := NEG4($$)                   { E_neg($$); }

gen r8  := NOT1($$)                   { E_not($$); }
gen r16 := NOT2($$)                   { E_not($$); }
gen r32 := NOT4($$)                   { E_not($$); }

gen r8  := ADD1($$, r8:rhs)           { E_add($rhs, $$); }
gen r16 := ADD2($$, r16:rhs)          { E_add($rhs, $$); }
gen r32 := ADD4($$, r32:rhs)          { E_add($rhs, $$); }

gen r8  := ADD1($$, CONSTANT():c)     { E_addi($c.value, $$); }
gen r16 := ADD2($$, CONSTANT():c)     { E_addi($c.value, $$); }
gen r32 := ADD4($$, CONSTANT():c)     { E_addi($c.value, $$); }

gen r8  := SUB1($$, r8:rhs)           { E_sub($rhs, $$); }
gen r16 := SUB2($$, r16:rhs)          { E_sub($rhs, $$); }
gen r32 := SUB4($$, r32:rhs)          { E_sub($rhs, $$); }

gen r8  := SUB1($$, CONSTANT():c)     { E_subi($c.value, $$); }
gen r16 := SUB2($$, CONSTANT():c)     { E_subi($c.value, $$); }
gen r32 := SUB4($$, CONSTANT():c)     { E_subi($c.value, $$); }

gen r8  := AND1($$, r8:rhs)           { E_and($rhs, $$); }
gen r16 := AND2($$, r16:rhs)          { E_and($rhs, $$); }
gen r32 := AND4($$, r32:rhs)          { E_and($rhs, $$); }

gen r8  := AND1($$, CONSTANT():c)     { E_andi($c.value, $$); }
gen r16 := AND2($$, CONSTANT():c)     { E_andi($c.value, $$); }
gen r32 := AND4($$, CONSTANT():c)     { E_andi($c.value, $$); }

gen r8  := OR1($$, r8:rhs)            { E_or($rhs, $$); }
gen r16 := OR2($$, r16:rhs)           { E_or($rhs, $$); }
gen r32 := OR4($$, r32:rhs)           { E_or($rhs, $$); }

gen r8  := OR1($$, CONSTANT():c)      { E_ori($c.value, $$); }
gen r16 := OR2($$, CONSTANT():c)      { E_ori($c.value, $$); }
gen r32 := OR4($$, CONSTANT():c)      { E_ori($c.value, $$); }

gen r8  := EOR1($$, r8:rhs)           { E_xor($rhs, $$); }
gen r16 := EOR2($$, r16:rhs)          { E_xor($rhs, $$); }
gen r32 := EOR4($$, r32:rhs)          { E_xor($rhs, $$); }

gen r8  := EOR1($$, CONSTANT():c)     { E_xori($c.value, $$); }
gen r16 := EOR2($$, CONSTANT():c)     { E_xori($c.value, $$); }
gen r32 := EOR4($$, CONSTANT():c)     { E_xori($c.value, $$); }

gen al  := MUL1($$, r8:rhs) uses ah	  { E_imul($rhs); }
gen ax  := MUL2($$, r16:rhs) uses dx  { E_imul($rhs); }
gen eax := MUL4($$, r32:rhs) uses edx { E_imul($rhs); }

gen al := DIVU1(al, bl|cl|dl:rhs) uses ah { E_xor(REG_AH, REG_AH); E_div($rhs); }
gen al := REMU1(al, bl|cl|dl:rhs) uses ah { E_xor(REG_AH, REG_AH); E_div($rhs); E_move(REG_AH, REG_AL); }
gen al := DIVS1(al, bl|cl|dl:rhs) uses ah { E_cbw(); E_idiv($rhs); }
gen al := REMS1(al, bl|cl|dl:rhs) uses ah { E_cbw(); E_idiv($rhs); E_move(REG_AH, REG_AL); }

gen ax := DIVU2(ax, bx|cx:rhs) uses dx    { E_xor(REG_DX, REG_DX); E_div($rhs); }
gen dx := REMU2(ax, bx|cx:rhs)            { E_xor(REG_DX, REG_DX); E_div($rhs); }
gen ax := DIVS2(ax, bx|cx:rhs) uses dx    { E_cwd(); E_idiv($rhs); }
gen dx := REMS2(ax, bx|cx:rhs)            { E_cwd(); E_idiv($rhs); }

gen eax := DIVU4(eax, ebx|ecx:rhs) uses edx { E_xor(REG_EDX, REG_EDX); E_div($rhs); }
gen edx := REMU4(eax, ebx|ecx:rhs)          { E_xor(REG_EDX, REG_EDX); E_div($rhs); }
gen eax := DIVS4(eax, ebx|ecx:rhs) uses edx { E_cdq(); E_idiv($rhs); }
gen edx := REMS4(eax, ebx|ecx:rhs)          { E_cdq(); E_idiv($rhs); }

gen al|bl|dl            := LSHIFT1($$:lhs, cl:rhs) { E_shl($lhs); }
gen ax|bx|dx|si|di      := LSHIFT2($$:lhs, cl:rhs) { E_shl($lhs); }
gen eax|ebx|edx|esi|edi := LSHIFT4($$:lhs, cl:rhs) { E_shl($lhs); }
gen r8                  := LSHIFT1($$:lhs, CONSTANT():c) { E_shli($c.value, $lhs); }
gen r16                 := LSHIFT2($$:lhs, CONSTANT():c) { E_shli($c.value, $lhs); }
gen r32                 := LSHIFT4($$:lhs, CONSTANT():c) { E_shli($c.value, $lhs); }

gen al|bl|dl            := RSHIFTU1($$:lhs, cl:rhs) { E_shr($lhs); }
gen ax|bx|dx|si|di      := RSHIFTU2($$:lhs, cl:rhs) { E_shr($lhs); }
gen eax|ebx|edx|esi|edi := RSHIFTU4($$:lhs, cl:rhs) { E_shr($lhs); }
gen r8                  := RSHIFTU1($$:lhs, CONSTANT():c) { E_shri($c.value, $lhs); }
gen r16                 := RSHIFTU2($$:lhs, CONSTANT():c) { E_shri($c.value, $lhs); }
gen r32                 := RSHIFTU4($$:lhs, CONSTANT():c) { E_shri($c.value, $lhs); }

gen al|bl|dl            := RSHIFTS1($$:lhs, cl:rhs) { E_sar($lhs); }
gen ax|bx|dx|si|di      := RSHIFTS2($$:lhs, cl:rhs) { E_sar($lhs); }
gen eax|ebx|edx|esi|edi := RSHIFTS4($$:lhs, cl:rhs) { E_sar($lhs); }
gen r8                  := RSHIFTS1($$:lhs, CONSTANT():c) { E_sari($c.value, $lhs); }
gen r16                 := RSHIFTS2($$:lhs, CONSTANT():c) { E_sari($c.value, $lhs); }
gen r32                 := RSHIFTS4($$:lhs, CONSTANT():c) { E_sari($c.value, $lhs); }

// --- Conditionals ---------------------------------------------------------

%{
	sub CmpJumps(trueinsn: string, falseinsn: string, node: [Node]) is
		if node.beq.truelabel != node.beq.fallthrough then
			E_jump(trueinsn, node.beq.truelabel);
		end if;
		if node.beq.falselabel != node.beq.fallthrough then
			E_jump(falseinsn, node.beq.falselabel);
		end if;
	end sub;

	sub CmpJumpsJe(node: [Node]) is
		CmpJumps("je", "jne", node);
	end sub;

	sub CmpJumpsJb(node: [Node]) is
		CmpJumps("jb", "jae", node);
	end sub;

	sub CmpJumpsJl(node: [Node]) is
		CmpJumps("jl", "jge", node);
	end sub;

	sub beqc(node: [Node], lhs: Arith, rhs: Arith) is
		var label := node.beq.falselabel;
		if lhs == rhs then
			label := node.beq.truelabel;
		end if;
		if label != node.beq.fallthrough then
			E_jmp(label);
		end if;
	end sub;
%}

gen BEQ0(CONSTANT():c1, CONSTANT():c2):b
	    { beqc(self.n[0], $c1.value, $c2.value); }

gen BEQ1(r8:lhs, r8:rhs):b        uses all { E_cmp($rhs, $lhs);      CmpJumpsJe(self.n[0]); }
gen BEQ2(r16:lhs, r16:rhs):b      uses all { E_cmp($rhs, $lhs);      CmpJumpsJe(self.n[0]); }
gen BEQ4(r32:lhs, r32:rhs):b      uses all { E_cmp($rhs, $lhs);      CmpJumpsJe(self.n[0]); }
gen BEQ1(r8:lhs, CONSTANT():c):b  uses all { E_cmpi($c.value, $lhs); CmpJumpsJe(self.n[0]); }
gen BEQ2(r16:lhs, CONSTANT():c):b uses all { E_cmpi($c.value, $lhs); CmpJumpsJe(self.n[0]); }
gen BEQ4(r32:lhs, CONSTANT():c):b uses all { E_cmpi($c.value, $lhs); CmpJumpsJe(self.n[0]); }

gen BLTS1(r8:lhs, r8:rhs):b        uses all { E_cmp($rhs, $lhs);      CmpJumpsJl(self.n[0]); }
gen BLTS2(r16:lhs, r16:rhs):b      uses all { E_cmp($rhs, $lhs);      CmpJumpsJl(self.n[0]); }
gen BLTS4(r32:lhs, r32:rhs):b      uses all { E_cmp($rhs, $lhs);      CmpJumpsJl(self.n[0]); }
gen BLTS1(r8:lhs, CONSTANT():c):b  uses all { E_cmpi($c.value, $lhs); CmpJumpsJl(self.n[0]); }
gen BLTS2(r16:lhs, CONSTANT():c):b uses all { E_cmpi($c.value, $lhs); CmpJumpsJl(self.n[0]); }
gen BLTS4(r32:lhs, CONSTANT():c):b uses all { E_cmpi($c.value, $lhs); CmpJumpsJl(self.n[0]); }

gen BLTU1(r8:lhs, r8:rhs):b        uses all { E_cmp($rhs, $lhs);      CmpJumpsJb(self.n[0]); }
gen BLTU2(r16:lhs, r16:rhs):b      uses all { E_cmp($rhs, $lhs);      CmpJumpsJb(self.n[0]); }
gen BLTU4(r32:lhs, r32:rhs):b      uses all { E_cmp($rhs, $lhs);      CmpJumpsJb(self.n[0]); }
gen BLTU1(r8:lhs, CONSTANT():c):b  uses all { E_cmpi($c.value, $lhs); CmpJumpsJb(self.n[0]); }
gen BLTU2(r16:lhs, CONSTANT():c):b uses all { E_cmpi($c.value, $lhs); CmpJumpsJb(self.n[0]); }
gen BLTU4(r32:lhs, CONSTANT():c):b uses all { E_cmpi($c.value, $lhs); CmpJumpsJb(self.n[0]); }

// --- Case -----------------------------------------------------------------

gen STARTCASE1(al) uses all;

gen STARTCASE2(ax) uses all;

gen STARTCASE4(eax) uses all;

gen WHENCASE1():c uses all
{
	E_cmpi($c.value & 0xff, REG_AL);
	E_jne($c.falselabel);
}

gen WHENCASE2():c uses all
{
	E_cmpi($c.value & 0xffff, REG_AX);
	E_jne($c.falselabel);
}

gen WHENCASE4():c uses all
{
	E_cmpi($c.value, REG_EAX);
	E_jne($c.falselabel);
}

gen ENDCASE1();
gen ENDCASE2();
gen ENDCASE4();

// --- Casts ----------------------------------------------------------------

gen r8 :=  CAST21(r16b:val) { E_move(loreg($val), $$); }
gen r8 :=  CAST41(r32b:val) { E_move(loreg($val), $$); }
gen r16 := CAST42(r32b:val) { E_move(wordreg($val), $$); }

gen r16 := CAST12(r8:val):c  { E_ext($val, $$, $c.sext); }
gen r32 := CAST14(r8:val):c  { E_ext($val, $$, $c.sext); }
gen r32 := CAST24(r16:val):c { E_ext($val, $$, $c.sext); }

// --- Strings --------------------------------------------------------------

gen r32 := STRING():s
{
	R_flush($$);
	E("\tlea ");
	E_string($s.text);
	E_comma();
	E_reg($$);
	E_nl();
}

// --- Initialisers ---------------------------------------------------------

gen STARTINIT():s
{
	EmitterOpenStream(current_subr);
	E("\t.data 4\n"); # yes, really
	E_symref(&$s.sym, 0);
	E(":\n");
}

gen ENDINIT()
{
	EmitterCloseStream();
}

gen INIT1():c
{
	E("\t.byte ");
	E_u8($c.value as uint8);
	E_nl();
}

gen INIT2():c
{
	E("\t.short ");
	E_u16($c.value as uint16);
	E_nl();
}

gen INIT4():c
{
	E("\t.long ");
	E_u32($c.value as uint32);
	E_nl();
}

gen INITADDRESS():a
{
	E("\t.long ");
    E_symref(&$a.sym, $a.off);
    E_nl();
}

gen INITSUBREF():a
{
	E("\t.long ");
    E_subref($a.subr);
    E_nl();
}

gen INITSTRING():s
{
	E("\t.long ");
    E_string($s.text);
    E_nl();
}


// --- Inline assembly ------------------------------------------------------

gen ASMGROUPSTART() uses all;
gen ASMGROUPEND() uses all;

gen ASMSTART()
{
	R_flushall();
	E_tab();
}

gen ASMTEXT():t
{
	E($t.text);
	E_space();
}

gen ASMSYMBOL():s
{
	E_symref(&$s.sym, 0);
    E_space();
}

gen ASMSUBREF():s
{
	E_subref($s.subr);
    E_space();
}

gen ASMVALUE():c
{
	E_b8('(');
	E_i32($c.value);
	E_b8(')');
}

gen ASMEND()
{
    E_nl();
}



