sub InitVariable(subr: [Subroutine], symbol: [Symbol], type: [Type]) is
	CheckNotPartialType(type);
	symbol.kind := VAR;
	symbol.vardata := InternalAlloc(@bytesof VarSymbol) as [VarSymbol];
	symbol.vardata.type := type;
	symbol.vardata.subr := subr;
	ArchInitVariable(symbol);
	#print("var ");
	#print(symbol.name);
	#print(" at ");
	#print(current_subr.symbol.name);
	#print(" ");
	#print_hex_i8(symbol.vardata.wsid);
	#print(".0x");
	#print_hex_i16(symbol.vardata.offset as uint16);
	#print("+");
	#print_hex_i16(symbol.vardata.type.width as uint16);
	#print_nl();
end sub;

sub MakePointerType(type: [Type]): (ptrtype: [Type]) is
	ptrtype := type.pointerto;
	if ptrtype == nil then
		ptrtype := AllocNewType();
		ptrtype.kind := TYPE_POINTER;
		ptrtype.width := intptr_type.width;
		ptrtype.alignment := intptr_type.alignment;
		ptrtype.stride := intptr_type.stride;
		ptrtype.pointertype.element := type;
		type.pointerto := ptrtype;

		AddTypeToNamespace(type.symbol.namespace, ptrtype, StrDupBraced(type.symbol.name));
	end if;
end sub;

sub MakeArrayType(type: [Type], size: Size): (arraytype: [Type]) is
	CheckNotPartialType(type);

	arraytype := AllocNewType();
	arraytype.kind := TYPE_ARRAY;
	var w: Size := 0;
	if size > 0 then
		w := type.stride * (size - 1) + type.width;
	end if;
	arraytype.width := w;
	arraytype.alignment := type.alignment;
	arraytype.stride := type.stride * size;
	arraytype.arraytype.element := type;
	arraytype.arraytype.size := size;
	arraytype.arraytype.indextype := ArchGuessIntType(0, (size-1) as Arith);

	AddTypeToNamespace(type.symbol.namespace, arraytype, StrDupArrayed(type.symbol.name, size));
end sub;

# Called after a subroutine has been generated. This allows us to free up some
# of the resources used. Note that we can't free *everything* until our parent
# gets destructed, because parameters and types which they depend on might be
# referred to.
sub DestructSubroutineContents(subr: [Subroutine]) is
	var pending: [Symbol] := 0 as [Symbol];

	# Adds all members of the namespace to the pending list.
	sub QueueNamespace(namespace: [Namespace]) is
		while namespace.first != nil loop
			var s := namespace.first;
			namespace.first := s.next;

			s.next := pending;
			pending := s;
		end loop;
	end sub;

	# Find the last parameter.

	var last_parameter: [Symbol];
	if subr.num_output_parameters != 0 then
		last_parameter := GetOutputParameter(subr, subr.num_output_parameters - 1);
	elseif subr.num_input_parameters != 0 then
		last_parameter := GetInputParameter(subr, subr.num_input_parameters - 1);
	else
		last_parameter := 0 as [Symbol];
	end if;

	# last_parameter is now pointing at the last parameter, or null if there
	# are none.

	pending := subr.namespace.first;
	if last_parameter != nil then
		pending := last_parameter.next;
	end if;

	while pending != nil loop
		var symbol := pending;
		pending := pending.next;
		
		case symbol.kind is
			when TYPE:
				var type := symbol.typedata;
				case type.kind is
					when TYPE_RECORD:
						QueueNamespace(&type.recordtype.namespace);

					when TYPE_SUBROUTINE:
						QueueNamespace(&type.subrtype.subr.namespace);
						Free(type.subrtype.subr as [uint8]);
				end case;
				FreeType(type);

			when VAR:
				Free(symbol.vardata as [uint8]);
		end case;
		Free(symbol.name);
		FreeSymbol(symbol);
	end loop;

	if last_parameter != nil then
		last_parameter.next := 0 as [Symbol];
	else
		subr.namespace.first := 0 as [Symbol];
	end if;
	subr.namespace.last := last_parameter;
end sub;

sub CopyParameterList(param: [Symbol], subr: [Subroutine]) is
	var lastparam := 0 as [Symbol];

	while param != 0 as [Symbol] loop
		var p := AddSymbol(&subr.namespace, InternalStrDup(param.name));
		p.kind := VAR;
		p.vardata := InternalAlloc(@bytesof VarSymbol) as [VarSymbol];
		p.vardata.type := param.vardata.type;
		p.vardata.subr := param.vardata.subr;
		p.vardata.wsid := param.vardata.wsid;
		p.vardata.offset := param.vardata.offset;
		if lastparam != 0 as [Symbol] then
			lastparam.vardata.next_parameter := p;
		end if;
		lastparam := p;

		param := param.vardata.next_parameter;
	end loop;
end sub;

sub CreateMainSubroutine() is
	var type := AllocNewType();
	type.kind := TYPE_SUBROUTINE;

	var sym := AllocNewSymbol();
	sym.kind := TYPE;
	sym.name := "__main";
	sym.typedata := type;
	type.symbol := sym;

	current_subr := InternalAlloc(@bytesof Subroutine) as [Subroutine];
	current_subr.symbol := sym;
	current_subr.type := type;
	current_subr.intfsubr := current_subr;
	type.subrtype.subr := current_subr;

	AddToNamespace(&current_subr.namespace, sym);
end sub;

sub ReportWorkspaces(subr: [Subroutine]) is
    var i: uint8 := 0;
    while i != 4 loop
		var w := subr.workspace[i];
		if w != 0 then
			EmitterDeclareWorkspace(subr, i, w);
		end if;
        i := i + 1;
    end loop;
end sub;

