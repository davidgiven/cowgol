
sub CountParameters(param: [Symbol]): (count: uint8) is
	count := 0;
	while param != (0 as [Symbol]) loop
		count := count + 1;
		param := param.vardata.next_parameter;
	end loop;
end sub;

sub GetInputParameter(subr: [Subroutine], count: uint8): (param: [Symbol]) is
	if subr.num_input_parameters != 0 then
		param := subr.namespace.first;
		while count != 0 loop
			param := param.next;
			count := count - 1;
		end loop;
	else
		param := 0 as [Symbol];
	end if;
end sub;

sub GetOutputParameter(subr: [Subroutine], count: uint8): (param: [Symbol]) is
	if subr.num_output_parameters != 0 then
		count := count + subr.num_input_parameters;
		param := subr.namespace.first;
		while count != 0 loop
			param := param.next;
			count := count - 1;
		end loop;
	else
		param := 0 as [Symbol];
	end if;
end sub;

sub BadNodeWidth(width: uint8) is
	print("bad midcode width ");
	print_i8(width);
	print_nl();
	ExitWithError();
end sub;

sub WidthToIndex(width: uint8): (index: uint8) is
	case width is
		when 4: index := 3;
		when 8: index := 4;
		when else: index := width;
	end case;
end sub;

@decl sub AllocateNewNode(code: uint8): (m: [Node]);

include "midcodesfe.coh";

var node_freelist: [Node] := 0 as [Node];
@impl sub AllocateNewNode is
	if node_freelist != (0 as [Node]) then
		m := node_freelist;
		node_freelist := node_freelist.left;
		MemSet(m as [uint8], 0, @bytesof Node);
	else
		m := InternalAlloc(@bytesof Node) as [Node];
	end if;
	#print("alloc ");
	#print_hex_i32(m as intptr as uint32);
	#print(" op ");
	#print_i8(code);
	#print_nl();
	m.op := code;
end sub;

sub FreeNode(node: [Node]) is
	node.left := node_freelist;
	node_freelist := node;
end sub;

@impl sub PurgeAllFreeNodes is
	while node_freelist != (0 as [Node]) loop
		var b := node_freelist as [uint8];
		node_freelist := node_freelist.left;
		Free(b);
	end loop;
end sub;

sub NodeWidth(node: [Node]): (width: uint8) is
	width := 0;
	if node.type != (0 as [Type]) then
		width := node.type.width as uint8;
	end if;
end sub;

sub midcodec_i_bad_fold() is
	SimpleError("bad fold");
end sub;

sub FoldConstant1(op: uint8, lhsp: [Node]): (result: Arith) is
	var lhs := lhsp.constant.value;
	case op is
		when MIDCODE_NOT0: result := ~lhs;
		when MIDCODE_NEG0: result := -lhs;
		when else:
			midcodec_i_bad_fold();
	end case;
end sub;

sub FoldConstant2(op: uint8, lhsp: [Node], rhsp: [Node]): (result: Arith) is
	var lhs := lhsp.constant.value;
	var rhs := rhsp.constant.value;
	print("[fold lhs=");
	print_i32(lhs as uint32);
	print(" rhs=");
	print_i32(rhs as uint32);
	case op is
		when MIDCODE_ADD0:      result := lhs + rhs;
		when MIDCODE_SUB0:      result := lhs - rhs;
		when MIDCODE_MUL0:      result := lhs * rhs;
		when MIDCODE_DIVU0:     result := ((lhs as uint32) / (rhs as uint32)) as Arith;
		when MIDCODE_DIVS0:     result := (lhs as int32) / (rhs as int32);
		when MIDCODE_REMU0:     result := ((lhs as uint32) % (rhs as uint32)) as Arith;
		when MIDCODE_REMS0:     result := (lhs as int32) % (rhs as int32);
		when MIDCODE_AND0:      result := lhs & rhs;
		when MIDCODE_OR0:       result := lhs | rhs;
		when MIDCODE_EOR0:      result := lhs ^ rhs;
		when MIDCODE_LSHIFT0:   result := lhs << (rhs as uint8);
		when MIDCODE_RSHIFTU0:  result := ((lhs as uint32) >> (rhs as uint8)) as Arith;
		when MIDCODE_RSHIFTS0:  result := (lhs as int32) >> (rhs as uint8);
		when else:
			midcodec_i_bad_fold();
	end case;
	print(" result=");
	print_i32(result as uint32);
	print("]\n");
end sub;

sub MidC1Op(op: uint8, width: uint8, lhs: [Node]): (result: [Node]) is
	if lhs.op == MIDCODE_CONSTANT then
		lhs.constant.value := FoldConstant1(op, lhs);
		result := lhs;
	else
		result := AllocateNewNode(op + WidthToIndex(width));
		result.left := lhs;
	end if;
end sub;
	
sub GetPowerOfTwo(value: int32): (exp: uint8) is
	exp := 0;
	if (value > 0) and ((value & (value - 1)) == 0) then
		while value != 0 loop
			exp := exp + 1;
			value := value >> 1;
		end loop;
	end if;
end sub;

sub MidC2Op(op: uint8, width: uint8, lhs: [Node], rhs: [Node]): (result: [Node]) is
	# Convert subtractions of negative constants into additions, before the
	# rotation.

	if (op == MIDCODE_SUB0) and (rhs.op == MIDCODE_CONSTANT) then
		rhs.constant.value := -rhs.constant.value;
		op := MIDCODE_ADD0;
	end if;

	# Rotate commutative operations so the constant is on the RHS.

	var t: [Node];
	if op >= MIDCODE_ADD0 then
		# Ensure that x=1+y becomes x=y+1, which is easier to generate code for.
		if lhs.op == MIDCODE_CONSTANT then
			t := lhs;
			lhs := rhs;
			rhs := t;
		end if;

		# Ensure that x=(y+1)+2 becomes x=y+(1+2).
		if (rhs.op == MIDCODE_CONSTANT)
				and (lhs.op >= op) and (lhs.op <= (op+4))
				and (lhs.right.op == MIDCODE_CONSTANT)
		then
			t := MidConstant(
				FoldConstant2(op, lhs.right, rhs));
			Discard(rhs);
			rhs := t;

			t := lhs.left;
			lhs.left := 0 as [Node];
			Discard(lhs);
			lhs := t;
		end if;
	end if;

	# Special-case folding.

	if (lhs.op != MIDCODE_CONSTANT) and (rhs.op == MIDCODE_CONSTANT) then
		if (op == MIDCODE_MUL0) or (op == MIDCODE_DIVS0) or (op == MIDCODE_DIVU0) then
			var value := rhs.constant.value;
			var exp := GetPowerOfTwo(value);
			if exp != 0 then
				Discard(rhs);
				rhs := MidConstant((exp-1) as int32);
				case op is
					when MIDCODE_MUL0: op := MIDCODE_LSHIFT0;
					when MIDCODE_DIVS0: op := MIDCODE_RSHIFTS0;
					when MIDCODE_DIVU0: op := MIDCODE_RSHIFTU0;
				end case;
			end if;
		end if;
		if (op == MIDCODE_LSHIFT0) or (op == MIDCODE_RSHIFTU0) or (op == MIDCODE_RSHIFTS0) then
			if rhs.constant.value == 0 then
				Discard(rhs);
				result := lhs;
				return;
			end if;
		end if;
		if (op == MIDCODE_ADD0) or (op == MIDCODE_SUB0) then
			if rhs.constant.value == 0 then
				Discard(rhs);
				result := lhs;
				return;
			end if;
			if lhs.op == MIDCODE_ADDRESS then
				var rvalue := rhs.constant.value as Size;
				case op is
					when MIDCODE_ADD0:
						lhs.address.off := lhs.address.off + rvalue;
						Discard(rhs);
						result := lhs;
						return;
					when MIDCODE_SUB0:
						lhs.address.off := lhs.address.off - rvalue;
						Discard(rhs);
						result := lhs;
						return;
				end case;
			end if;
		end if;
	end if;

	# General constant folding.

	if (lhs.op == MIDCODE_CONSTANT) and (rhs.op == MIDCODE_CONSTANT) then
		lhs.constant.value := FoldConstant2(op, lhs, rhs);
		Discard(rhs);
		result := lhs;
		return;
	end if;

	# If we get this far, then actually create the new node.

	result := AllocateNewNode(op + WidthToIndex(width));
	result.left := lhs;
	result.right := rhs;
end sub;

sub MidCCast(width: uint8, lhs: [Node], issigned: uint8): (result: [Node]) is
	if lhs.op == MIDCODE_CONSTANT then
		result := lhs;
		return;
	end if;
	var srcwidth := lhs.type.width as uint8;
	if srcwidth == width then
		result := lhs;
	else
		var op: uint8;
		case srcwidth is
			when 1: op := MIDCODE_CAST10;
			when 2: op := MIDCODE_CAST20;
			when 4: op := MIDCODE_CAST40;
			when 8: op := MIDCODE_CAST80;
		end case;
		result := AllocateNewNode(op + WidthToIndex(width));
		result.left := lhs;
		result.cast1.sext := issigned;
	end if;
end sub;

