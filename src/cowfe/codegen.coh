sub AllocLabel(): (label: LabelRef) is
	label := next_label_id;
	next_label_id := next_label_id + 1;
end sub;

sub AllocSubrId(): (id: uint16) is
	id := next_subr_id;
	next_subr_id := next_subr_id + 1;
end sub;

interface MidWriter(node: [Node]);

include "arch.coh";
include "cobout.coh";

sub PrintNodes(rootnode: [Node]) is
	var old_next_node := next_node;
	PushNode(rootnode);
	while next_node != old_next_node loop
		var node := NextNode();
		if node == nil then
			break;
		end if;

		print_hex_i32(node as intptr as uint32);
		print_char(' ');
		print_i8(node.op);
		print_char(' ');
		print_hex_i32(node.left as intptr as uint32);
		print_char(' ');
		print_hex_i32(node.right as intptr as uint32);
		print_nl();
	end loop;
end sub;

sub ReallyGenerate(rootnode: [Node]) is
	E_b8('M');
	var old_next_node := next_node;
	PushNode(rootnode);
	while next_node != old_next_node loop
		var n := NextNode();
		E_b8(n.op);
		var sig := signatures[n.op - 1]; # array starts at midcode 1
		(writers[sig])(n);
	end loop;
	Discard(rootnode);
end sub;

var old_op: uint8 := 0;
sub Generate(statement: [Node]) is
	var op := statement.op;
	if (old_op == MIDCODE_JUMP) or (old_op == MIDCODE_RETURN) then
		if (op != MIDCODE_LABEL) and (op != MIDCODE_ENDSUB) then
			Discard(statement);
			return;
		end if;
	end if;

	if (op == MIDCODE_ASMSTART) and (old_op != MIDCODE_ASMEND) then
		ReallyGenerate(MidAsmgroupstart());
	end if;
	if (old_op == MIDCODE_ASMEND) and (op != MIDCODE_ASMSTART) then
		ReallyGenerate(MidAsmgroupend());
	end if;
	old_op := op;
	ReallyGenerate(statement);
end sub;

sub GenerateConditional(rootnode: [Node]) is
	var old_next_node := next_node;
	PushNode(rootnode);
	while next_node != old_next_node loop
		var node := PopNode();

		var t := node.beq.truelabel;
		var f := node.beq.falselabel;
		var r := node.beq.fallthrough;
		var lhs := node.left;
		var rhs := node.right;
		var op := node.op;

		if node.beq.negated != 0 then
			var x := t;
			t := f;
			f := x;
		end if;

		sub push_and_free() is
			rhs.beq.truelabel := t;
			rhs.beq.falselabel := f;
			rhs.beq.fallthrough := r;

			node.left := nil;
			node.right := nil;
			PushNode(rhs);
			PushNode(lhs);
			Discard(node);
		end sub;

		var rr: LabelRef;
		case op is
			when MIDCODE_BOR:
				rr := AllocLabel();

				lhs.beq.truelabel := t;
				lhs.beq.falselabel := rr;
				lhs.beq.fallthrough := rr;

				push_and_free();

			when MIDCODE_BAND:
				rr := AllocLabel();

				lhs.beq.truelabel := rr;
				lhs.beq.falselabel := f;
				lhs.beq.fallthrough := rr;

				push_and_free();

			when else:
				node.beq.truelabel := t;
				node.beq.falselabel := f;
				Generate(node);
				Generate(MidLabel(r));
		end case;
	end loop;
end sub;

