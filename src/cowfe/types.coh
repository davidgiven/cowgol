typedef LabelRef is uint16;
typedef Arith is int32;
typedef Size is uint16;

record Token is
	number @at(0): int32;
	string @at(0): string;
end record;

record Namespace is
	first: [Symbol];
	last: [Symbol];
	parent: [Namespace];
end record;

record HasElement is
	element: [Type];
end record;

record ArrayType: HasElement is
	size: Size;
	indextype: [Type];
end record;

record PointerType: HasElement is
end record;

record RecordType is
	namespace: Namespace;
	members: uint8;
end record;

record NumberType is
	is_signed: uint8;
end record;

record SubroutineType is
	subr: [Subroutine];
end record;

const TYPE_PARTIAL := 1;
const TYPE_NUMBER := 2;
const TYPE_POINTER := 3;
const TYPE_ARRAY := 4;
const TYPE_RECORD := 5;
const TYPE_SUBROUTINE := 6;

record Type is
	numbertype @at(0): NumberType;
	arraytype @at(0): ArrayType;
	pointertype @at(0): PointerType;
	recordtype @at(0): RecordType;
	subrtype @at(0): SubroutineType;

	symbol: [Symbol];
	pointerto: [Type];
	width: Size;
	stride: Size;
	kind: uint8;
	alignment: uint8;
end record;

record VarSymbol is
	type: [Type];
	subr: [Subroutine]; # null for a member
	next_parameter: [Symbol]; # for lists of parameters
	offset: Size;
	wsid: uint8;
end record;

record Symbol is
	typedata @at(0): [Type];
	vardata @at(0): [VarSymbol];
	constant @at(0): Arith;
	alias @at(0): [Symbol];

	name: string;
	namespace: [Namespace];
	next: [Symbol];
	kind: uint8;
end record;

const SUB_HAS_IMPL          := 0b001;
const SUB_IS_INTERFACE      := 0b010;
const SUB_IS_IMPLEMENTATION := 0b100;

record Subroutine is
	symbol: [Symbol];
	parent: [Subroutine];
	namespace: Namespace;
	type: [Type];
	intfsubr: [Subroutine];
	id: uint16;
	workspace: Size[4];
	arch: [ArchSubroutine];
	num_input_parameters: uint8;
	num_output_parameters: uint8;
	flags: uint8;
end record;

record SubroutineLabels is
	old_break_label: LabelRef;
	old_continue_label: LabelRef;
	old_labels: [SubroutineLabels];
end record;

record LoopLabels is
	loop_label: LabelRef;
	exit_label: LabelRef;
	old_break_label: LabelRef;
	old_continue_label: LabelRef;
end record;
	
record IfLabels is
	exit_label: LabelRef;
	true_label: LabelRef;
	false_label: LabelRef;
	next: [IfLabels];
end record;

record CaseLabels is
	next_label: LabelRef;
	end_label: LabelRef;
	old_case: [CaseLabels];
	width: uint8;
	seenelse: uint8;
end record;

record SubroutineCall is
	expr: [Node];
	intfsubr: [Subroutine];
	parent: [SubroutineCall];
	input_parameter: [Symbol];
	output_parameter: [Symbol];
	num_input_args: uint8;
	num_output_args: uint8;
end record;

var current_subr: [Subroutine];
var next_label_id: LabelRef := 1;
var next_subr_id: uint16 := 1;
var break_label: LabelRef;
var continue_label: LabelRef;
var current_if: [IfLabels];
var current_case: [CaseLabels];
var current_type: [Type];
var current_call: [SubroutineCall];
var current_subr_def: [SubroutineLabels] := 0 as [SubroutineLabels];

const REG_SAME_AS_INSTRUCTION_RESULT := -1;

# Forward references

@decl sub PushNode(node: [Node]);
@decl sub PopNode(): (node: [Node]);
@decl sub NextNode(): (node: [Node]);
var nodes: [Node][16];
var next_node := &nodes[0];

@decl sub Discard(node: [Node]);

@decl sub AllocNewSymbol(): (symbol: [Symbol]);
@decl sub FreeSymbol(symbol: [Symbol]);

@decl sub AllocNewType(): (type: [Type]);
@decl sub FreeType(type: [Type]);

@decl sub IsPtr(type: [Type]): (result: uint8);
