const SYM_UNDECLARED := 0;
const SYM_DEFINED    := 0b001;
const SYM_PUBLIC     := 0b010;
const SYM_DECLARED   := 0b100;

record Symbol is
	next: [Symbol];
	name: string;
	id: SubId;
	state: uint8;
end record;

var main_symbol: Symbol;

var symbols: [Symbol] := &main_symbol;

var current_id: SubId := 1;
var current_subr: [Symbol] := nil;

sub GetSymbol(name: string): (symbol: [Symbol]) is
	symbol := symbols;
	while symbol != nil loop
		if StrCmp(name, symbol.name) == 0 then
			return;
		end if;
		symbol := symbol.next;
	end loop;

	symbol := Alloc(@bytesof Symbol) as [Symbol];
	symbol.name := StrDup(name);
	symbol.id := current_id;
	current_id := current_id + 1;
	symbol.next := symbols;
	symbols := symbol;
end sub;
	
sub ProcessFile() is
	main_symbol.name := "@";
	main_symbol.state := SYM_DEFINED | SYM_DECLARED;

	var c: uint8;
	var subrid: uint16 := 0;
	var buffer: uint8[32];

	sub GetC() is
		c := FCBGetChar(&infcb);
	end sub;

	sub ExpectC(want: uint8) is
		if c != want then
			FatalError("malformed cowwrap directive");
		end if;
		GetC();
	end sub;

	sub SkipToEndOfLine() is
		loop
			if (c == 0) or (c == 26) or (c == 10) then
				break;
			end if;
			GetC();
		end loop;
	end sub;

	sub SkipWhitespace() is
		loop
			if (c != ' ') and (c != '\t') then
				break;
			end if;
			GetC();
		end loop;
	end sub;

	sub ReadWord() is
		SkipWhitespace();
		var p := &buffer[0];
		loop
			if ((c < '0') or (c > '9'))
					and ((c < 'a') or (c > 'z'))
					and ((c < 'A') or (c > 'Z'))
					and (c != '_')
					and (c != '@') then
				break;
			end if;

			[p] := c;
			p := p + 1;
			if p == &buffer[@sizeof buffer] then
				FatalError("word too long");
			end if;

			GetC();
		end loop;
		[p] := 0;
	end sub;

	sub ReadNumber(): (result: int32) is
		ReadWord();
		var p: string;
		(result, p) := AToI(&buffer[0]);
		if p == &buffer[0] then
			FatalError("malformed number");
		end if;
	end sub;

	sub MarkSubroutinePublic(symbol: [Symbol]) is
		if (symbol.state & SYM_PUBLIC) == 0 then
			symbol.state := symbol.state | SYM_PUBLIC;
			EmitterDeclareExternal(symbol.id, symbol.name);
		end if;
	end sub;

	sub ImportSubroutine() is
		GetC();
		ReadWord();
		MarkSubroutinePublic(GetSymbol(&buffer[0]));
	end sub;

	sub CloseChunk() is
		if current_subr != nil then
			EmitterPopChunk('F');
			current_subr := nil;
		end if;
	end sub;

	sub DeclareSubroutine(exported: uint8) is
		CloseChunk();

		GetC();
		ReadWord();
		current_subr := GetSymbol(&buffer[0]);
		current_subr.state := current_subr.state | SYM_DEFINED;

		if exported != 0 then
			MarkSubroutinePublic(current_subr);
		end if;
		if (current_subr.state & SYM_DECLARED) == 0 then
			EmitterDeclareSubroutine(current_subr.id, current_subr.name);
			current_subr.state := current_subr.state | SYM_DECLARED;
		end if;

		EmitterPushChunk();
		E_b8(0x80);
		E_b16(current_subr.id);
	end sub;

	sub SetSubroutineWorkspace() is
		GetC();
		ReadWord();
		var symbol := GetSymbol(&buffer[0]);
		SkipWhitespace();
		var wid := ReadNumber() as uint8;
		SkipWhitespace();
		var woff := ReadNumber() as Size;
		EmitterDeclareWorkspace(symbol.id, wid, woff);
	end sub;

	sub EmitWorkspaceRef() is
		GetC();
		ReadWord();
		var symbol := current_subr;
		if buffer[0] != 0 then
			symbol := GetSymbol(&buffer[0]);
			EmitterReferenceSubroutine(current_subr.id, symbol.id);
		end if;
		ExpectC('.');
		var wid := ReadNumber() as uint8;
		ExpectC('.');
		var woff := ReadNumber() as Size;
		E_b8(COO_ESCAPE_WSREF);
		E_b16(symbol.id);
		E_b8(wid);
		E_b16(woff);
	end sub;

	sub SourceLine() is
		if current_subr == nil then
			FatalError("source text with no subroutine defined");
		end if;
		loop
			if (c == 0) or (c == 10) or (c == 26) then
				break;
			end if;
			if c != 13 then
				if c == '`' then
					GetC();
					case c is
						when '`':
							E_b8(COO_ESCAPE_THISSUB);
							GetC();

						when '^':
							E_b8(COO_ESCAPE_THISCOO);
							GetC();

						when '$':
							EmitWorkspaceRef();

						when else:
							ReadWord();
							var subr := GetSymbol(&buffer[0]);
							E_b8(COO_ESCAPE_SUBREF);
							E_b16(subr.id);
							EmitterReferenceSubroutine(current_subr.id, subr.id);
					end case;
				else
					E_b8(c);
					GetC();
				end if;
			end if;
		end loop;
		E_b8(10);
	end sub;

	GetC();
	loop
		if (c == 0) or (c == 26) then
			break;
		end if;
		case c is
			when '&':
				GetC();
				case c is
					when 'X':
						DeclareSubroutine(1);

					when 'S':
						DeclareSubroutine(0);

					when 'W':
						SetSubroutineWorkspace();

					when else:
						FatalError("bad cowwrap command");
				end case;
				SkipToEndOfLine();

			when '#':
				SkipToEndOfLine();

			when else:
				SourceLine();
		end case;
		GetC();
	end loop;
	CloseChunk();
end sub;

sub CheckSymbols() is
	var success: uint8 := 1;
	var s := symbols;
	while s != nil loop
		if s.state == SYM_UNDECLARED then
			print("reference to undeclared symbol '");
			print(s.name);
			print("'\n");
			success := 0;
		end if;
		s := s.next;
	end loop;

	if success == 0 then
		FatalError("failed");
	end if;
end sub;

