var outfcb: FCB;

const RECORD_SIZE := 255;

record EmitterRecord is
	data: uint8[RECORD_SIZE];
	ptr: uint8;
	next: [EmitterRecord];
end record;

record EmitterChunk is
	next: [EmitterChunk];
	first_record: [EmitterRecord];
	current_record: [EmitterRecord];
	length: uint16;
end record;

var current_chunk: [EmitterChunk];

sub E_b8(byte: uint8) is
	if current_chunk != nil then
		var r := current_chunk.current_record;
		if r.ptr == RECORD_SIZE then
			r := Alloc(@bytesof EmitterRecord) as [EmitterRecord];
			current_chunk.current_record.next := r;
			current_chunk.current_record := r;
		end if;

		r.data[r.ptr] := byte;
		r.ptr := r.ptr + 1;
		current_chunk.length := current_chunk.length + 1;
	end if;
end sub;

sub E(text: string) is
	loop
		var c := [text];
		text := text + 1;
		if c == 0 then
			break;
		end if;
		E_b8(c);
	end loop;
end sub;

sub E_b16(word: uint16) is
	E_b8(word as uint8);
	E_b8((word>>8) as uint8);
end sub;

sub E_b32(quad: uint32) is
	E_b16(quad as uint16);
	E_b16((quad>>16) as uint16);
end sub;

sub EmitterPushChunk() is
	var chunk := Alloc(@bytesof EmitterChunk) as [EmitterChunk];
	chunk.current_record := Alloc(@bytesof EmitterRecord) as [EmitterRecord];
	chunk.first_record := chunk.current_record;
	chunk.next := current_chunk;
	current_chunk := chunk;
end sub;

sub EmitterPopChunk(type: uint8) is
	FCBPutChar(&outfcb, type);

	var len := current_chunk.length;
	FCBPutChar(&outfcb, len as uint8);
	FCBPutChar(&outfcb, (len>>8) as uint8);

	var r := current_chunk.first_record;
	while r != nil loop
		var i: uint8 := 0;
		while i != r.ptr loop
			FCBPutChar(&outfcb, r.data[i]);
			i := i + 1;
		end loop;

		var nextr := r.next;
		Free(r as [uint8]);
		r := nextr;
	end loop;

	var nextchunk := current_chunk.next;
	Free(current_chunk as [uint8]);
	current_chunk := nextchunk;
end sub;

sub EmitterOpenfile(filename: string) is
	if FCBOpenOut(&outfcb, filename) != 0 then
		FatalError("cannot open output file");
	end if;
end sub;

sub EmitterClosefile() is
	FCBPutChar(&outfcb, 'E');
	FCBPutChar(&outfcb, 0);
	FCBPutChar(&outfcb, 0);
	if FCBClose(&outfcb) != 0 then
		FatalError("cannot close output file");
	end if;
end sub;

sub EmitterDeclareSubroutine(id: SubId, name: string) is
	EmitterPushChunk();
	E_b16(id);
	E(name);
	EmitterPopChunk('N');
end sub;

sub EmitterDeclareExternal(id: SubId, name: string) is
	EmitterPushChunk();
	E_b16(id);
	E(name);
	EmitterPopChunk('X');
end sub;

sub EmitterReferenceSubroutine(user: SubId, used: SubId) is
	if user != used then
		EmitterPushChunk();
		E_b16(user);
		E_b16(used);
		EmitterPopChunk('R');
	end if;
end sub;

sub EmitterDeclareWorkspace(id: SubId, wid: uint8, workspace: Size) is
	EmitterPushChunk();
	E_b16(id);
	E_b8(wid);
	E_b16(workspace as uint16);
	EmitterPopChunk('W');
end sub;

