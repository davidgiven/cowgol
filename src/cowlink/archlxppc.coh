const STACK_SIZE := 128;

var workspaceSize: Size[NUM_WORKSPACES];

sub E_nl() is
	E_b8('\n');
end sub;

sub ArchAlignUp(value: Size, alignment: uint8): (newvalue: Size) is
	newvalue := value;
end sub;

sub ArchEmitSubRef(subr: [Subroutine]) is
	E_b8('f');
	E_u16(subr.id);
	E_b8('_');
	E(subr.name);
end sub;

sub ArchEmitWSRef(wid: uint8, address: Size) is
	E("ws+");
	E_u16(address);
end sub;

sub ArchEmitHeader(coo: [Coo]) is
	E(".global _start\n");
	E("\t_start:\n");

	# This code is placed at the beginning of the ELF executable and is the
	# first thing that runs.
	#
	# On entry, the stack looks like this:
	#
	# sp+...          NULL
	# sp+8+(4*argc)   env (X quads)
	# sp+4+(4*argc)   NULL
	# sp+4            argv (argc quads)
	# sp              argc

	E("\taddi 3,1,4\n"); # compute argv
	E("\tlis 4,argv@ha\n");
	E("\tstw 3,argv@l(4)\n");

	while coo != nil loop
		var main := coo.index.subroutines[0];
		if main != nil then
			E("\tbl ");
			ArchEmitSubRef(main);
			E_nl();
		end if;
		coo := coo.next;
	end loop;

	E("_exit:\n");
	E("\tli 3,0\n");
	E("\tli 0,1\n"); # __exit();
	E("\tsc\n");
end sub;

sub ArchEmitFooter(coo: [Coo]) is
	E("\t.section .bss\n");
	E("argc: .space 4\n");
	E("argv: .space 4\n");
	E("ws: .space ");
	E_u16(workspaceSize[0]);
	E_nl();
	E("LOMEM: .space 1024*1024\n");
	E("HIMEM:\n");

	# This is ridiculous, but can't be helped: write spaces to pad the end
	# of the file. Unix C compilers don't like trailing nuls.

	var padding := FCBExt(&outfcb) - FCBPos(&outfcb);
	while padding != 0 loop
		E_b8(' ');
		padding := padding - 1;
	end loop;
end sub;


