const STACK_SIZE := 128;

var workspaceSize: Size[NUM_WORKSPACES];

sub E_nl() is
	E_b8('\n');
end sub;

sub ArchAlignUp(value: Size, alignment: uint8): (newvalue: Size) is
	newvalue := value;
end sub;

sub ArchEmitSubRef(subr: [Subroutine]) is
	E_b8('f');
	E_u16(subr.id);
	E_b8('_');
	E(subr.name);
end sub;

sub ArchEmitWSRef(wid: uint8, address: Size) is
	E("ws");
	E_b8(wid + '0');
	E_i16(address as int16);
end sub;

sub ArchEmitHeader(coo: [Coo]) is
	if (workspaceSize[1] + workspaceSize[3]) > 0xee then
		SimpleError("ran out of zero page space");
	end if;

	E(".cpu \"65c02\"\n");
	E("* = $400\n");

	sub AliasMacro(srcname: string, destname: string) is
		E(srcname);
		E(" .macro\n\t");
		E(destname);
		E(" \\@\n\t.endm\n");
	end sub;

	AliasMacro("db", ".byte");
	AliasMacro("dw", ".word");
	AliasMacro("dl", ".dword");

	AliasMacro("jra", "bra");
	AliasMacro("jpl", "bpl");
	AliasMacro("jmi", "bmi");
	AliasMacro("jne", "bne");
	AliasMacro("jeq", "beq");
	AliasMacro("jcc", "bcc");
	AliasMacro("jcs", "bcs");

	E("ws1 = 0\n");
	E("ws3 = ws1 + ");
	E_u16(workspaceSize[1]);
	E_nl();
	E("mos = ws3 + ");
	E_u16(workspaceSize[3]);
	E_nl();

	E("\ttsx\n");
	E("\tstx sp\n");

	while coo != nil loop
		var main := coo.index.subroutines[0];
		if main != nil then
			E("\tjsr ");
			ArchEmitSubRef(main);
			E_nl();
		end if;
		coo := coo.next;
	end loop;

	E("\tldx sp\n");
	E("\ttxs\n");
	E("\trts\n");
end sub;

sub ArchEmitFooter(coo: [Coo]) is
	E("sp: .fill 1\n");
	E("ws0: .fill ");
	E_u16(workspaceSize[0]);
	E_nl();
	E("ws2: .fill ");
	E_u16(workspaceSize[2]);
	E_nl();
	E("LOMEM:\n");
	E(".end\n");
end sub;


