var workspaceSize: Size[NUM_WORKSPACES];

sub E_nl() is
	E_b8('\n');
end sub;

sub ArchAlignUp(value: Size, alignment: uint8): (newvalue: Size) is
	newvalue := value;
end sub;

sub ArchEmitSubRef(subr: [Subroutine]) is
	E_b8('f');
	E_u16(subr.id);
	E_b8('_');
	E(subr.name);
end sub;

sub ArchEmitWSRef(wid: uint8, address: Size) is
	E("ws");
	E_u8(wid);
	E("+");
	E_u16(address);
end sub;

sub ArchEmitHeader(coo: [Coo]) is
	E("\torg 0x100\n");
	E("ws1 equ 0x80\n");

	E("\tdw 0x80a8\n"); # magic
	E("\tdb 2, 1, 1, 0\n"); # 6800, w/6803 extensions, loading at 0x100, no hints
	E("\tdw text_end - text_start\n");
	E("\tdw 0\n"); #E("\tdw data_end - data_start\n");
	E("\tdw bss_end - bss_start\n");
	E("\tdb entry & 0xff\n"); # entry point low byte
	E("\tdb 0, 1, 0\n"); # use all pages for heap, w/ one page of stack, no zero page
	E("\tdw sigvec\n"); # sigvec

	E("text_start:\n");
	E("sigvec rts\n");
	E("entry:\n");
	while coo != nil loop
		var main := coo.index.subroutines[0];
		if main != nil then
			E("\tjsr ");
			ArchEmitSubRef(main);
			E_nl();
		end if;
		coo := coo.next;
	end loop;
	E("exit:\n");
	E("\tclra\n");
	E("\tclrb\n");
	E("\tpshb\n");
	E("\tpsha\n");
	E("\tincb\n");
	E("\tswi\n");
end sub;

sub ArchEmitFooter(coo: [Coo]) is
	E("text_end:\n");
	E("bss_start:\n");

	E("ws0 equ bss_start\n");

	E("bss_end equ ws0 + ");
	E_u16(workspaceSize[0]);
	E_nl();
end sub;

