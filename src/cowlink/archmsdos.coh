const STACK_SIZE := 128;

var workspaceSize: Size[NUM_WORKSPACES];

sub E_nl() is
	E_b8('\n');
end sub;

sub ArchAlignUp(value: Size, alignment: uint8): (newvalue: Size) is
	newvalue := value;
end sub;

sub ArchEmitSubRef(subr: [Subroutine]) is
	E_b8('f');
	E_u16(subr.id);
	E_b8('_');
	E(subr.name);
end sub;

sub ArchEmitWSRef(wid: uint8, address: Size) is
	E("ws+");
	E_u16(address);
end sub;

sub ArchEmitHeader(coo: [Coo]) is
	E("\t[warning -number-overflow]\n");
	E("\tcpu 8086\n");
    E("\tbits 16\n");
    E("\tsegment code align=16\n");

    E("\tpush ds\n");
    E("\tpop es\n");
    E("\tmov ax, dgroup\n");
    E("\tmov ds, ax\n");

	while coo != nil loop
		var main := coo.index.subroutines[0];
		if main != nil then
			E("\tcall ");
			ArchEmitSubRef(main);
			E_nl();
		end if;
		coo := coo.next;
	end loop;

	E("\tmov ax, 0x4c00\n");
	E("\tint 0x21\n");
    E("\tsegment stack stack noprogbits align=16\n");
    E("\tresb ");
    E_u16(STACK_SIZE);
    E_nl();
    E("stacktop:\n");
    E("\tsegment data public align=16\n");
    E("\tsegment bss noprogbits public\n");
    E("\tgroup dgroup data bss\n");
end sub;

sub ArchEmitFooter(coo: [Coo]) is
    E("\tsegment bss\n");

	E("ws:\n\tresb ");
    E_u16(workspaceSize[0]);
	E_nl();

	E("LOMEM:\n");

	E_b8(26);
end sub;

